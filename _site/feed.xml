<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>EightLake</title>
        <description>EightLake</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 26 Jan 2024 14:34:08 -0700</pubDate>
        <lastBuildDate>Fri, 26 Jan 2024 14:34:08 -0700</lastBuildDate>
        <generator>Jekyll v4.3.2</generator>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Today, I’m sharing the unfortunate news that Strake will shut down on January 31st, 2024. Over the past three years, our team has done fantastic work taking a different approach to solving the FinOps problem for engineers. I want to thank all Strake’s employees, investors, and customers who were with us on this journey.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;talent&quot;&gt;Talent&lt;/h2&gt;

&lt;p&gt;I can’t speak highly enough about the team at Strake. With their technical expertise, determination, and team values, these people will add tremendous value wherever they end up next. I’m providing links to everyone’s LinkedIn profile below with their job title for anyone interested in adding great people to their team.&lt;/p&gt;

&lt;p&gt;If you have questions or want a reference for anyone, please &lt;a href=&quot;mailto:brian@eightlake.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAqmKQAB9KeqE_ZJYp5Uh_VVTBWsWwuxocE&quot;&gt;Niels Nielsen&lt;/a&gt; - (Front-end, Typescript/React)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAACWckcgBg1Q9GwIGP16DUUMw3lQToyGeCTs&quot;&gt;Matt Howe&lt;/a&gt; - (API/Backend, Golang)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ryan-burney/&quot;&gt;Ryan Burney&lt;/a&gt; - (UI/UX, Design)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAAy6iwBhLaUvn_-SXEDEjDSNtKvlAsPY7c&quot;&gt;Jonathan Hunt&lt;/a&gt; - (API/Backend, Golang)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAFlHdQByDvuUgjpovF5wgCTZVTx5xOiFzA&quot;&gt;John Greve&lt;/a&gt; - (Data Engineering)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAE0ho0BjNqU_XEJmkwIxDWBY_RoECU9vRI&quot;&gt;Ken Farmer&lt;/a&gt; - (Data Engineering)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAABUbHqcB3qu9CXfJAldrBeKOMV6KDqV60Bk&quot;&gt;Joseph (Joey) Muller&lt;/a&gt; - (Data Engineering)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAACb-iEBYBvRvKa7guyJWtJTuHKmvKZQzwE&quot;&gt;Kevin Depue&lt;/a&gt; - (API/Backend, Golang)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/ACoAAAv2Z-UByjacWpgsiPLH3dW9-GhRzZVGeYY&quot;&gt;Cody Kochmann&lt;/a&gt; - (Cloud Infrastructure)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cloud-resources&quot;&gt;Cloud Resources&lt;/h2&gt;

&lt;p&gt;Even though Strake did not have the outcome I hoped it would, there was a tremendous amount of value created by this team. I’ve been working on adding blog posts, open-source projects, and other startup tools we used to &lt;a href=&quot;https://eightlake.com&quot;&gt;eightlake.com&lt;/a&gt; (Finally, a use for that email domain I’ve had for years). These resources will always be free to help development teams and startups operate smoothly.&lt;/p&gt;

&lt;h4 id=&quot;aws-research&quot;&gt;AWS Research&lt;/h4&gt;

&lt;p&gt;All of Strake’s blog posts will be hosted on &lt;a href=&quot;https://eightlake.com&quot;&gt;eightlake.com&lt;/a&gt;. We invested a lot of effort into writing developer-focused content on AWS topics our customers needed help with. These blog posts will be tagged with “Cloud” for searching on the website. Some examples of these posts include:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://eightlake.com/what-is-ec2-other&quot;&gt;What is EC2-Other?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eightlake.com/enterprise-discount-program&quot;&gt;How to Negotiate an AWS Enterprise Discount Program (EDP)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eightlake.com/reserved-instances-or-savings-plans&quot;&gt;Reserved Instances or Savings Plans?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;open-source-projects&quot;&gt;Open-Source Projects&lt;/h4&gt;

&lt;p&gt;Strake took over ownership and maintenance of &lt;a href=&quot;https://eightlake.com/aws-pricing-for-google-sheets&quot;&gt;AWS Pricing by Strake&lt;/a&gt; in 2021. This project will continue to be maintained by &lt;a href=&quot;https://github.com/aryounce&quot;&gt;Adam Younce&lt;/a&gt;. This add-on to Google Sheets to analyze public AWS Pricing data will still be available from the &lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;Google Workspace Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Strake also created the &lt;a href=&quot;&quot;&gt;Developer’s Guide to AWS Costs&lt;/a&gt;, which used SQLite to analyze the Cost and Usage Report for key AWS Services. That project and the content in blog form will live on &lt;a href=&quot;https://eightlake.com/developer-guide-to-aws-costs&quot;&gt;eightlake.com&lt;/a&gt; with the tag “DGAC” for easy search, and the GitHub repo will be hosted by &lt;a href=&quot;https://github.com/reganbrianpatrick&quot;&gt;Brian Regan&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;startup-resources&quot;&gt;Startup Resources&lt;/h2&gt;

&lt;p&gt;I’m lucky to have spent some time studying finance and have spent time working with several other founding teams on financial planning. As the markets started to decline, understanding expenses and run rates became critical for startups at every stage of growth.&lt;/p&gt;

&lt;p&gt;To make this more accessible to any founding team, I have created a basic version of the template I used to plan Strake’s finances and documented how to use it in a &lt;a href=&quot;https://eightlake.com/startup-finance&quot;&gt;Startup Finance&lt;/a&gt; blog post. If you have questions about the template, please reach out.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you again, please &lt;a href=&quot;mailto:brian@eightlake.com&quot;&gt;reach out&lt;/a&gt; with any questions.&lt;/p&gt;

&lt;p&gt;Brian Regan&lt;/p&gt;
</description>
                <pubDate>Mon, 01 Jan 2024 15:00:00 -0700</pubDate>
                <link>http://localhost:4000/strake</link>
                <guid isPermaLink="true">http://localhost:4000/strake</guid>
                
                <category>strake</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;h1 id=&quot;no-cfo-no-problem&quot;&gt;No CFO, No Problem&lt;/h1&gt;

&lt;p&gt;Over the past couple of years, the startup industry has seen an increasingly high bar for fundraising with &lt;em&gt;interesting&lt;/em&gt; terms. This has led companies at every growth stage to look hard at their spending and make difficult decisions to help extend their runway.&lt;/p&gt;

&lt;p&gt;When I co-founded Strake, I was lucky to have a background in finance and know how to plan out our team’s burn rate effectively. This type of certainty over the company’s finances helps when making important hiring decisions or navigating the &lt;a href=&quot;https://www.cnbc.com/2023/03/10/silicon-valley-bank-collapse-how-it-happened.html&quot;&gt;SVB collapse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From my experience, having a founder who has finance experience is uncommon. Most teams rely on a “CFO as a Service” for financial planning, reporting, and other essential tasks like annual filings and taxes. These services can add a lot of value. Still, more is needed for founders to understand their finances and the financial impact of their operational decisions. To help founders understand their finances, I decided to share the finance template we used for planning at Strake and make it available for anyone to download and use for their planning purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1QcsSqyllfEhHdKkIAQvv-cqf0MUkSZ--FYcRzD3nTSg/edit?usp=sharing&quot;&gt;&lt;img src=&quot;/images/finance.jpg&quot; alt=&quot;Link to EightLake Startup Finance Template&quot; title=&quot;this is a test&quot; /&gt;&lt;/a&gt;
&lt;em&gt;To access the template, either click the image above or &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1QcsSqyllfEhHdKkIAQvv-cqf0MUkSZ--FYcRzD3nTSg/edit?usp=sharing&quot;&gt;click here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started.&lt;/h1&gt;

&lt;p&gt;I’ve gone through this template with a handful of technical founders already and have some high-level notes I wanted to share before breaking down how to use the template:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This template is for planning purposes; this version does not compare your plan to your finances. That template will be very company-specific.&lt;/li&gt;
  &lt;li&gt;There is no revenue in this template. I have other versions that include income, but this template is targeted at startup founders who are trying to plan seed funding.&lt;/li&gt;
  &lt;li&gt;Before consulting a professional, do not use this template for taxes, corporate filings, or anything other than your own planning.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;template-sections&quot;&gt;Template Sections&lt;/h1&gt;

&lt;p&gt;The template is broken into three sections: README, INPUTS, and OUTPUTS.&lt;/p&gt;

&lt;h2 id=&quot;readme&quot;&gt;README&lt;/h2&gt;

&lt;p&gt;This page is a basic explanation of each sheet and how to use the template. That page links back to this blog post and provides an email address you can reach out to with more questions: &lt;a href=&quot;mailto:finance@eightlake.com&quot;&gt;finance@eightlake.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;inputs&quot;&gt;INPUTS&lt;/h2&gt;

&lt;p&gt;You will add information about your business expenses to these pages. I did my best to make this as simple as possible and still capture the major cost categories:&lt;/p&gt;

&lt;h3 id=&quot;people&quot;&gt;People&lt;/h3&gt;

&lt;p&gt;People should be your largest expense category. This cost category calculation includes Salary, Bonus, Benefits, and Payroll Tax Expenses (PTE). Salary and bonus should be specific based on the terms of your employment contract. Benefits and PTE are generally planned as a &lt;strong&gt;rate&lt;/strong&gt; based on the average across your business. For example, if your salary expense is $100 and your benefits expense is $10, your &lt;strong&gt;benefits rate&lt;/strong&gt; is an average of 10% across all employees.&lt;/p&gt;

&lt;p&gt;To use this sheet, fill out:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Employee Name&lt;/li&gt;
  &lt;li&gt;Title&lt;/li&gt;
  &lt;li&gt;Start Date (required)&lt;/li&gt;
  &lt;li&gt;End Date (leave blank unless an employee has left the company)&lt;/li&gt;
  &lt;li&gt;Salary&lt;/li&gt;
  &lt;li&gt;Bonus Rate&lt;/li&gt;
  &lt;li&gt;Benefits Rate (average rate across all employees)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;hosting&quot;&gt;Hosting&lt;/h3&gt;

&lt;p&gt;Hosting expenses will vary significantly depending on your business. If you have hosting fees, tracking those costs and understanding how they change is essential.&lt;/p&gt;

&lt;p&gt;Startups can also get credits for development from the major cloud providers. Once activated, these credits usually have a 12- or 24-month timeline for use. This template can help your team track your credits and total hosting spend.&lt;/p&gt;

&lt;p&gt;To use this sheet:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Estimate your monthly cost by cloud provider before any credits are applied in rows: 10 for AWS, 17 for Microsoft, and 24 for Google.&lt;/li&gt;
  &lt;li&gt;If you have credits:
    &lt;ol&gt;
      &lt;li&gt;Add your Credit amount in the month you activate credits.&lt;/li&gt;
      &lt;li&gt;These credits are either 100% used, or the model will max out at 12 months.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;software&quot;&gt;Software&lt;/h3&gt;

&lt;p&gt;Software expenses end up being “death by 1,000 contracts”. Nowadays, it isn’t unlikely that a startup could end up with 50 different software subscriptions their team is paying for to get the job done. Because of this, it is equally important to understand &lt;strong&gt;what&lt;/strong&gt; you’re paying for and &lt;strong&gt;how much&lt;/strong&gt; you’re paying.&lt;/p&gt;

&lt;p&gt;To use this sheet, fill out:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vendor name&lt;/li&gt;
  &lt;li&gt;Start Date&lt;/li&gt;
  &lt;li&gt;End Date (if you’ve successfully canceled the service)&lt;/li&gt;
  &lt;li&gt;Monthly/Annual payment structure.&lt;/li&gt;
  &lt;li&gt;Cost (If you selected “Monthly”, enter the monthly cost)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;consulting&quot;&gt;Consulting&lt;/h3&gt;

&lt;p&gt;Consulting costs can vary significantly from month to month. This sheet is elementary to accommodate how your team uses consulting services. Unfortunately, this means there is less automation to fill out the costs.&lt;/p&gt;

&lt;p&gt;To use this sheet, fill out:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vendor&lt;/li&gt;
  &lt;li&gt;Notes (optional if you want to add notes)&lt;/li&gt;
  &lt;li&gt;Monthly costs by calendar month&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-expenses&quot;&gt;Other Expenses&lt;/h3&gt;

&lt;p&gt;The Other Expenses sheet is a catch-all for expenses your business is incurring. Things like office space, food, travel, and computers will end up here. There are cost categories for significant expenses and a catch-all “Other Expenses” when required.&lt;/p&gt;

&lt;p&gt;To use this sheet, fill out:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vendor&lt;/li&gt;
  &lt;li&gt;Category (drop-down)&lt;/li&gt;
  &lt;li&gt;Notes (optional if you want to add notes)&lt;/li&gt;
  &lt;li&gt;Monthly costs by expense line item&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;outputs&quot;&gt;OUTPUTS&lt;/h2&gt;

&lt;p&gt;Once you’ve reviewed all the inputs, the data is calculated and displayed in two different Output sheets: Monthly and Quarterly.&lt;/p&gt;

&lt;p&gt;The Monthly view is helpful if your team plans internally and goes through different scenarios. Use the Quarterly view when talking to your investors about your burn rate or want to show a high-level overview of your business spending.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;reach-out&quot;&gt;Reach out&lt;/h2&gt;

&lt;p&gt;If there are any questions about the template or you’d like help augmenting it to fulfill your company’s specific needs, please get in touch with &lt;a href=&quot;mailto:finance@eightlake.com&quot;&gt;finance@eightlake.com&lt;/a&gt;.&lt;/p&gt;
</description>
                <pubDate>Mon, 01 Jan 2024 15:00:00 -0700</pubDate>
                <link>http://localhost:4000/startup-finance</link>
                <guid isPermaLink="true">http://localhost:4000/startup-finance</guid>
                
                <category>finance</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;&lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;AWS Pricing by Strake&lt;/a&gt; is an open-source project that allows anyone to bring AWS Public pricing into Google Sheets using Strake’s custom functions. To help the community get started with this project, Strake published several free templates to help engineers answer critical questions about AWS Pricing. Today, we will use Google Sheets templates to analyze Amazon EC2 Instance and EBS Pricing.&lt;/p&gt;

&lt;h2 id=&quot;amazon-web-services-pricing-is-complicated&quot;&gt;&lt;strong&gt;Amazon Web Services Pricing is Complicated!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Amazon Web Services operates in over &lt;strong&gt;30&lt;/strong&gt; regions, has over &lt;strong&gt;200&lt;/strong&gt; different services, and &lt;strong&gt;thousands&lt;/strong&gt; of usage types. This results in a nauseating number of prices that go into calculating your monthly AWS bill.&lt;/p&gt;

&lt;p&gt;For Amazon Elastic Compute Cloud (EC2), there are over &lt;strong&gt;265,000 lines of data in the public AWS EC2 pricing file for a single region.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On top of all the operational complexities of AWS, understanding AWS pricing and pricing changes is a critical component of understanding your AWS bill. In this blog post, we will walk through how your team can quickly analyze AWS Pricing data and use this data to your advantage when planning infrastructure changes.&lt;/p&gt;

&lt;h2 id=&quot;aws-pricing-by-strake&quot;&gt;&lt;strong&gt;AWS Pricing by Strake&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Strake recently launched our open-source project, &lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;AWS Pricing by Strake&lt;/a&gt;, on Product Hunt. This project is an add-on for Google Sheets that makes up-to-date AWS public pricing available using custom Google Sheets functions.&lt;/p&gt;

&lt;p&gt;Before we go into too much detail, here is a 3-minute video on how to get started with AWS Pricing:&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

&lt;h2 id=&quot;aws-ec2-pricing&quot;&gt;&lt;strong&gt;AWS EC2 Pricing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In previous posts on Strake’s blog, including the &lt;a href=&quot;https://eightlake.com/aws-ec2-cost-analysis&quot;&gt;Developer’s Guide to AWS Costs: EC2&lt;/a&gt; and &lt;a href=&quot;https://eightlake.com/what-is-ec2-other&quot;&gt;What is EC2-Other?&lt;/a&gt;, I’ve broken down the different types of charges that come through your AWS bill under the ‘EC2’ service. Today, we will focus on understanding pricing for the hourly running cost of EC2 Instances.&lt;/p&gt;

&lt;h3 id=&quot;amazon-ec2-instance-types&quot;&gt;&lt;strong&gt;Amazon EC2 Instance Types&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before using AWS Pricing by Strake to calculate EC2 pricing, we must understand the concept of EC2 instance types. EC2 instance type, region, platform, and purchase type are the key variables to determine what an EC2 Instance will cost per hour.&lt;/p&gt;

&lt;p&gt;EC2 instance types combine an EC2 instance family and the EC2 instance size. For example, the instance type “m5.large” is the combination of the instance family “m5” (anything before the ‘.’) and the instance size “large” (after the ‘.’). You can repeat this methodology for any EC2 instance type offered by AWS:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;EC2 Instance Type&lt;/th&gt;
      &lt;th&gt;EC2 Instance Family&lt;/th&gt;
      &lt;th&gt;EC2 Instance Size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;m5.large&lt;/td&gt;
      &lt;td&gt;m5&lt;/td&gt;
      &lt;td&gt;large&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c6i.2xlarge&lt;/td&gt;
      &lt;td&gt;c6i&lt;/td&gt;
      &lt;td&gt;2xlarge&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i3en.12xlarge&lt;/td&gt;
      &lt;td&gt;i3en&lt;/td&gt;
      &lt;td&gt;12xlarge&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;on-demand-and-reserved-instance-ec2-pricing&quot;&gt;&lt;strong&gt;On Demand and Reserved Instance EC2 Pricing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;With the AWS Pricing by Strake project, our team has also shared several templates to help users calculate their infrastructure costs. The first template, “AWS Pricing by Strake - EC2 Pricing and Reserved Instances”, makes it simple for any user to calculate the On Demand and Reserved Instance costs for their EC2 instances.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1_kGiAaWzShNfDuMRF9icCzQotIkaTOu5hex9v7YNL_0/edit?usp=sharing&quot;&gt;AWS Pricing: EC2 Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, If you have not already, you can download &lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;AWS Pricing by Strake&lt;/a&gt; from the Google Workspace Marketplace. Downloading this add-on takes less than 15 seconds!&lt;/p&gt;

&lt;p&gt;!https://workspace.google.com/static/img/marketplace/en/gwmBadge.svg?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, you will need to make a copy of the EC2 Template and open the sidebar to view our formula documentation. Once you have downloaded a copy of the template, click Extensions → AWS Pricing by Strake → How to use AWS Pricing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws-pricing-2.jpg&quot; alt=&quot;AWS Pricing 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get started, open the sidebar documentation by going to “Extensions” –&amp;gt; “AWS Pricing by Strake” –&amp;gt; “How to use AWS Pricing”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, Once the add-on has been downloaded and the sidebar is open, you can start the use the template. Select the region, platform, and instance type of the EC2 instance you want to calculate pricing for. After the formulas calculate, you will have the On Demand and Reserved Instance prices and discount rates to analyze in Google Sheets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws-pricing-3.jpg&quot; alt=&quot;AWS Pricing 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the Region, Platform, and Instance Type using the template.&lt;/p&gt;

&lt;p&gt;Now that we understand how the template works, we can use this template to answer some critical business questions, for example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do the prices for the new c6i instances compare to the c5a instances?&lt;/strong&gt; The price is often lower when AWS releases new instance families compared to the current generation. Engineers must understand the cost and operational benefits of moving to a new instance family before starting the migration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Should we make convertible or reserved instance reservations?&lt;/strong&gt; How do the discount rates compare for different payment options and commitment terms? I discussed this in another blog post, &lt;a href=&quot;https://eightlake.com/complete-guide-to-aws-reservations&quot;&gt;A Complete Guide to AWS Reservations&lt;/a&gt;. Three key variables determine how large a discount will be: length of commitment, specificity of the commitment, and the amount of money paid upfront. This EC2 template will let your business understand the different discount rates to weigh cost benefits and operational complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’re starting a new development project. What instance types should we use?&lt;/strong&gt; How does pricing compare across EC2 instance types? When your engineering team starts a new project, it is crucial to estimate your costs from the beginning. Maybe $0.01 per hour doesn’t seem like a big difference, but when you’re running thousands of instances in production, that can be a meaningful cost.&lt;/p&gt;

&lt;h2 id=&quot;ec2-and-ebs-volume-pricing&quot;&gt;&lt;strong&gt;EC2 and EBS Volume Pricing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The second template we have created and shared with the AWS Community, “AWS Pricing by Strake - EC2 &amp;amp; EBS Calculator”, combines the hourly EC2 instance cost with any attached EBS volume cost. These two costs combined give users a much better understanding of what their development project will cost.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1iXmGH55LBAbAy1m-EA_HZyPvMr54EoIfhcOVOIlVrr0/edit?usp=sharing&quot;&gt;AWS Pricing: EC2 and EBS Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use this template, &lt;strong&gt;First&lt;/strong&gt;, select the details for the EC2 instances. We discussed calculating the cost for different EC2 Instance Types with the “EC2 Pricing and Reserved Instance Template”. The only difference with this template is that the user must also select the payment type and any related selections. For example, if you choose the “Purchase Type” as Reserved, you will be prompted to fill out the Offering Class, Term, and Payment Option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws-pricing-4.jpg&quot; alt=&quot;AWS Pricing 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select EC2 Instance Details. If the Purchase Type is Reserved, the Offering Class, Term, and Payment Option must also be selected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, select the details for the EBS volumes that will be attached to your instances. This step is optional. If you don’t want to calculate the cost of EBS volumes, leave those cells blank.&lt;/p&gt;

&lt;p&gt;EBS volumes have pricing variables similar to EC2 Instances that must be chosen before AWS Pricing by Strake can reveal a price. These are Volume Type, Storage Type, Region” and Volume Size (GB).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws-pricing-5.jpg&quot; alt=&quot;AWS Pricing 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the EBS Volume details Volume Type, Storage Type, Region and Volume Size (GB).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, select the count of EC2 Instances and EBS Volumes. This value is used to calculate the total cost of your infrastructure. This cell needs to be filled. The default value for this template is “1”.&lt;/p&gt;

&lt;p&gt;With the template filled out, the calculations will show Hourly, Daily, and Monthly total costs as well as the individual costs for EC2 and EBS. This template, in particular, is suited for when engineers are making EC2 compute or EBS storage changes and need to calculate cost changes, such as the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upgrading EBS volume types and want to understand the total cost impact.&lt;/strong&gt; Storage costs are just as complex as EC2 Instance Types. When your team is planning infrastructure changes, understand the cost before it happens so there are no surprises on your AWS bill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expanding production infrastructure due to customer demand and need to estimate the image to their Gross Margins.&lt;/strong&gt; If your production environment is based on EC2 Instances with EBS volumes as the primary form of storage, this template can help you build out your Cost of Goods Sold (COGS) for your production environment. COGS is a compelling metric to track as a business to understand how your costs will scale as you win new customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calculating the total cost impact of changing infrastructure from On Demand to Reserved Instance pricing.&lt;/strong&gt; Total cost reduction from reservations is an important metric to track so the business understands what percentage cost reduction Reservations can actually provide. Unfortunately, Reserved Instances don’t apply to EBS Volumes. This template will allow your team to combine EC2 Reserved Instances and your existing EBS volumes to calculate the total cost reduction to your infrastructure.&lt;/p&gt;

</description>
                <pubDate>Fri, 15 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/aws-ec2-ebs-formulas</link>
                <guid isPermaLink="true">http://localhost:4000/aws-ec2-ebs-formulas</guid>
                
                <category>cloud</category>
                
                <category>opensource</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Strake, the AWS cost management platform built for engineers, is excited to announce that we have entered into an agreement with Mike Heffner to assume ownership and maintenance of the AWS Pricing add-on for Google Sheets. This project is available for free from the &lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;Google Workspace Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;awspricing-add-on-for-google-sheets&quot;&gt;&lt;strong&gt;AWS Pricing add-on for Google Sheets&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;AWS customers are always looking for ways to optimize their infrastructure and achieve more accurate forecasting. Unfortunately, this work requires manual effort and removes engineering resources from important feature work. In addition to Strake’s core platform, we’re committed to maintaining the AWS Pricing add-on for Google Sheets as an open-source tool to help AWS users understand their cloud costs.&lt;/p&gt;

&lt;p&gt;Our team has spent the last several months working with the creator, Mike Heffner, to understand the project and how to best serve the community:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nearly four years ago I created the aws-pricing Google Sheets add-on because I was tired of copying and pasting AWS pricing data when compiling infrastructure cost estimates. Since then I’ve been amazed by the adoption and interest from the AWS community for the add-on. That’s why I’m excited that the team at Strake has graciously offered to take over ownership and maintenance of the add-on moving forward. I’m grateful that the team has restored the add-on for all users and I’m excited to see what new features they’ll add in the future. The add-on will be able to continue as a useful resource for the AWS community.‍–Mike Heffner&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;about-awspricing-for-google-sheets&quot;&gt;&lt;strong&gt;About AWS Pricing for Google Sheets&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The AWS Pricing add-on for Google Sheets allows any Google Sheets user to pull the current public AWS pricing information into their spreadsheet using Google Sheets functions.&lt;/p&gt;

&lt;p&gt;In its current state, there are functions for Elastic Compute Cloud (EC2) and Elastic Block Store (EBS). In the coming weeks, we will have an update about the second version of the AWS Pricing add-on that features streamlined formulas, restored RDS functions, and an updated backend to work with the new format of public AWS Pricing files.&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;&lt;strong&gt;Learn More&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Strake is committed to maintaining the AWS Pricing add-on as an open-source project and expanding the project with feedback from the open-source community. Here are some ways to stay up to date on the project and get in touch with our team:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you want to learn more about the AWS Pricing project, you can get it for free from the &lt;a href=&quot;https://workspace.google.com/marketplace/app/aws_pricing_by_strake/378787760903&quot;&gt;Google Workspace Marketplace.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To get in touch with our team, &lt;a href=&quot;https://eightlake.com/contact/&quot;&gt;Contact us&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 14 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/aws-pricing-for-google-sheets</link>
                <guid isPermaLink="true">http://localhost:4000/aws-pricing-for-google-sheets</guid>
                
                <category>cloud</category>
                
                <category>opensource</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Amazon RDS is a managed database service that makes it easy to spin up, operate and scale relational databases to support any size production infrastructure. RDS is one of Amazon Web Services’ most utilized services and has a complicated billing structure encompassing instance running costs, data transfer costs, and provisioned IOPS and Storage. For more details about RDS, check out the AWS &lt;a href=&quot;https://docs.aws.amazon.com/rds/index.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-much-does-amazon-rds-cost&quot;&gt;&lt;strong&gt;How Much Does Amazon RDS Cost?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Customers using RDS in their AWS environment have many different variables to consider before spinning up their RDS infrastructure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which database engine are you going to use? The database engine can impact everything from your cost model, hourly costs, and whether or not you need to pay for a database license from a third-party vendor.&lt;/li&gt;
  &lt;li&gt;Which region will this instance (or serverless deployment) be deployed in? RDS costs vary for hourly instance costs, storage, and IOPS.&lt;/li&gt;
  &lt;li&gt;Is this a Single-AZ or Multi-AZ deployment? Using a Multi-AZ deployment reduces the risk of infrastructure failures but will double your costs.&lt;/li&gt;
  &lt;li&gt;What type of activity are we expecting from this resource? Should we be prepared for high data transfer costs across AWS Regions? How often do we need to perform manual database backups?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these decisions have a profound impact on your AWS pricing for RDS. The following guide describes how to isolate each main RDS cost category using the &lt;a href=&quot;https://eightlake.com/cost-and-usage-report-setup&quot;&gt;Cost and Usage Report (CUR)&lt;/a&gt; and what these different cost categories mean. If there are any questions about this guide, please let us know in your &lt;a href=&quot;https://github.com/getstrake/developer-cost-guide/discussions/3&quot;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rds-instance-costs&quot;&gt;&lt;strong&gt;RDS Instance Costs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In this guide, I am grouping AWS RDS charges from the cost and usage report into two categories: Existence and Utilization Costs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Existence Cost&lt;/strong&gt; - RDS costs that are associated with running an instance and not impacted by resource activity. Examples of existence costs include ‘InstanceUsage’ and provisioned I/O and storage costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Utilization Cost&lt;/strong&gt; - RDS costs that are directly impacted by resource activity. Examples include data transfer costs, RDS backup storage, and Aurora serverless usage.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rds-existence-costs&quot;&gt;&lt;strong&gt;RDS Existence Costs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;RDS Existence Cost categories combine instance running costs (similar to &lt;a href=&quot;https://eightlake.com/aws-ec2-cost-analysis&quot;&gt;EC2 existence cost&lt;/a&gt;) with the provisioned services and capacity required to run your RDS instance. Variables like Database engine, region, and deployment type will impact your existence costs. Existence cost analysis will walk through how to analyze RDS costs in five categories: Instance usage, provisioned I/O, provisioned Storage, Performance Insights, and Database Proxy costs. If you’re looking for RDS pricing you can check out the &lt;a href=&quot;https://aws.amazon.com/rds/pricing/&quot;&gt;Amazon RDS Pricing Page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;rds-instance-usage&quot;&gt;&lt;strong&gt;RDS Instance Usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;RDS Instance usage is the cost associated with running an RDS instance. RDS instances can be deployed as a single or multi-az instance and can be covered with a reserved instance. In the following queries, we will first analyze the on-demand costs for a single or multi-az RDS deployment and then perform the same analysis for RDS instances covered by a reserved instance. In the sections below, the queries will analyze differet RDS Instnace pricing models.On-Demand, Single-AZ Instance Usage&lt;/p&gt;

&lt;p&gt;The query below will show &lt;strong&gt;single_od_cost&lt;/strong&gt; by &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt;, &lt;strong&gt;[product/instanceType]&lt;/strong&gt;, and &lt;strong&gt;[product/region]&lt;/strong&gt;. These results will show all RDS instances with a Single-AZ deployment being billed with the on-demand pricing model.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Isolate the Single-AZ, OnDemand, running cost for an RDS Instance.
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as single_od_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%InstanceUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the query above, here is some background on the fields being used and what the filter values mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; - A unique identifier for an RDS instance. You can also use this field in the WHERE clause to narrow the analysis to a single RDS instance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[product/instanceType]&lt;/strong&gt; and &lt;strong&gt;[product/region]&lt;/strong&gt; - These are used to identify the instance type and region for each RDS Instance. These are two key variables that determine the pricing of an instance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/ProductCode]&lt;/strong&gt; - &lt;em&gt;‘AmazonRDS’&lt;/em&gt; is the product code for RDS. Use this field to ensure the analysis focuses on RDS costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt; - ‘&lt;em&gt;Usage&lt;/em&gt;’ is the value used to find results for on-demand pricing. Make sure to filter on ‘usage’ when identifying on-demand costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; - The operation helps narrow down the cost categories. For RDS, ‘&lt;em&gt;CreateDBInstance&lt;/em&gt;’ is one of the most common operations to capture existence costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; - For this query, we filtered on ‘&lt;em&gt;%InstanceUsage%&lt;/em&gt;’ to capture everything for a single-az RDS deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;on-demand-multi-az-instance-usage&quot;&gt;&lt;strong&gt;On-Demand, Multi-AZ Instance Usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The query below will show &lt;strong&gt;multi_od_cost&lt;/strong&gt; by &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt;, &lt;strong&gt;[product/instanceType]&lt;/strong&gt;, and &lt;strong&gt;[product/region]&lt;/strong&gt;. These results will show all RDS instances with a Multi-AZ deployment billed with the on-demand pricing model.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Isolate the Multi-AZ, OnDemand, running cost for an RDS Instance.
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as multi_od_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%Multi-AZUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is only one difference in the filters for a Multi-AZ query compared to a Single-AZ query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; - The values ‘&lt;em&gt;%Multi-AZUsage&lt;/em&gt;’ marks an instance as a Multi-AZ deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reserved-instance-single-az-instance-usage&quot;&gt;&lt;strong&gt;Reserved Instance, Single-AZ Instance Usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If your RDS Instance is covered with a Reserved Instance you will want to understand your RDS Reserved Instance pricing. The query below will show &lt;strong&gt;single_reserved_cost&lt;/strong&gt; by &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt;, &lt;strong&gt;[product/instanceType]&lt;/strong&gt;, and &lt;strong&gt;[product/region]&lt;/strong&gt;. These results will show all RDS instances with a Single-AZ deployment billed with the reserved instance pricing model.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Isolate the Single-AZ, Reserved, running cost for an RDS Instance.
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as single_reserved_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE     &apos;%InstanceUsage:%&apos;    
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([reservation/EffectiveCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the query above, here is some background on the fields used and what the filter values mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of using &lt;strong&gt;[lineItem/UnblendedCost]&lt;/strong&gt; to calculate the total cost, this query uses &lt;strong&gt;[reservation/EffectiveCost]&lt;/strong&gt;. This field will add together two costs that are critical for accurately tracking RI costs:&lt;/li&gt;
  &lt;li&gt;Hourly amortization of any upfront fees: If your team purchases any RIs that include an upfront fee, your analysis must amortize the cost for the duration of the RI contract. For example, $8,760 in upfront fees for a 1-year contract must be amortized to $1 per hour of the year.&lt;/li&gt;
  &lt;li&gt;Hourly fee: If your team purchases any RIs that include an hourly fee, you must add this to the amortization of upfront fees.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt; - ‘&lt;em&gt;DiscountedUsage&lt;/em&gt;’ is the value used to find results for reserved instance pricing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reserved-instance-multi-az-instance-usage&quot;&gt;&lt;strong&gt;Reserved Instance, Multi-AZ Instance Usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The query below will show &lt;strong&gt;multi_reserved_cost&lt;/strong&gt; by &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt;, &lt;strong&gt;[product/instanceType]&lt;/strong&gt;, and &lt;strong&gt;[product/region]&lt;/strong&gt;. These results show all RDS instances with a Multi-AZ deployment billed with the reserved instance pricing model.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Isolate the Multi-AZ, Reserved, running cost for an RDS Instance.
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as multi_reserved_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE     &apos;%Multi-AZUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is only one difference in the filters for a Multi-AZ query compared to a Single-AZ query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This query also uses the &lt;strong&gt;[reservation/EffectiveCost]&lt;/strong&gt; field to calculate the total cost.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; - The values ‘&lt;em&gt;%Multi-AZUsage&lt;/em&gt;’ denotes the instance is a Multi-AZ deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;total-rds-instance-usage-cost&quot;&gt;&lt;strong&gt;Total RDS Instance Usage Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The query below combines Single-AZ On-Demand, Single-AZ Reserved, Multi-AZ On-Demand, and Multi-AZ Reserved RDS instance costs. The final column of this query, &lt;strong&gt;total_running_cost&lt;/strong&gt;, combines all the different cost types.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Total instance running costs combining Single, Multi-AZ on-demand and Reserved instance costs
WITH single_od_cost AS (
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as single_od_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%InstanceUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost])
)
, single_reserved_cost AS (
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as single_reserved_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE     &apos;%InstanceUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([reservation/EffectiveCost])
)
, multi_od_cost AS (
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as multi_od_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%Multi-AZUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost])
)
, multi_reserved_cost AS (
SELECT [lineItem/ResourceID], [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as multi_reserved_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE     &apos;%Multi-AZUsage:%&apos;
GROUP BY [lineItem/ResourceID], [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost])
)
SELECT CUR.[lineItem/ResourceID], CUR.[product/instanceType], CUR.[product/region], COALESCE(single_od_cost.single_od_cost, 0) as single_od_cost, COALESCE(single_reserved_    cost.single_reserved_cost, 0) as single_reserved_cost, COALESCE(multi_od_cost.multi_od_cost, 0) as multi_od_cost, COALESCE(multi_reserved_cost.multi_reserved_cost, 0) as multi_    reserved_cost, (COALESCE(single_od_cost.single_od_cost, 0)+COALESCE(single_reserved_cost.single_reserved_cost, 0)+COALESCE(multi_od_cost.multi_od_cost, 0)+COALESCE(multi_reserved_    cost.multi_reserved_cost, 0)) as total_running_cost
FROM CUR
LEFT JOIN single_od_cost ON single_od_cost.[lineItem/ResourceID] = CUR.[lineItem/ResourceID]
LEFT JOIN single_reserved_cost ON single_reserved_cost.[lineItem/ResourceID] = CUR.[lineItem/ResourceID]
LEFT JOIN multi_od_cost ON multi_od_cost.[lineItem/ResourceID] = CUR.[lineItem/ResourceID]
LEFT JOIN multi_reserved_cost ON multi_reserved_cost.[lineItem/ResourceID] = CUR.[lineItem/ResourceID]
WHERE CUR.[lineItem/ProductCode] is &apos;AmazonRDS&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
GROUP BY CUR.[lineitem/ResourceId], CUR.[product/instanceType], CUR.[product/region]
ORDER BY total_running_cost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;provisioned-storage&quot;&gt;&lt;strong&gt;Provisioned Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;provisioned-general-purpose-storage&quot;&gt;&lt;strong&gt;Provisioned General Purpose Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;RDS instance storage comes in many different formats. With General Purpose provisioned storage, you are only charged for the provisioned storage and not any of the IOPS consumed. Storage fees are charged as $ per GB per month. In this query, total cost is isolated as &lt;strong&gt;gp2_storage_cost&lt;/strong&gt; by filtering &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; with the value ‘&lt;em&gt;%GP2-Storage%&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Provisioned GP2 Storage
SELECT [lineItem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as gp2_storage_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%GP2-Storage%&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;provisioned-iops-storage&quot;&gt;&lt;strong&gt;Provisioned IOPS Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;RDS allows users to provision I/O capacity required for your project. You will be charged a fixed amount for the storage provisioned and the IOPS consumed. To narrow down RDS costs to provisioned IOPS, filter the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; to ‘&lt;em&gt;%PIOPS%&lt;/em&gt;’. In this query, we are calculating the total cost as &lt;strong&gt;piops_cost&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Provisioned IOPS (PIOPS) and Storage.
SELECT [lineItem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as piops_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%PIOPS%&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;provisioned-magnetic-storage&quot;&gt;&lt;strong&gt;Provisioned Magnetic Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Magnetic storage is a previous generation of storage. AWS recommends upgrading to GP2 or GP3 storage if you currently use Magnetic storage in your infrastructure. That being said, we can identify &lt;strong&gt;magnetic_storage_cost&lt;/strong&gt; by filtering the &lt;strong&gt;[lineItem/ResourceId]&lt;/strong&gt; by ‘&lt;em&gt;%StorageUsage&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--Provisioned Magnetic Storage
SELECT [lineItem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as magnetic_storage_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE &apos;%StorageUsage&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;performance-insights&quot;&gt;&lt;strong&gt;Performance Insights&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Performance Insights for RDS offer free 7-day retention of performance data and 1M API requests per month for your RDS instance at no charge. From there, users can decide to extend the retention up to 24 months for a fixed cost per vCPU. In this query, total performance insights cost is calculated as &lt;strong&gt;pi_cost&lt;/strong&gt; by filtering &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; as ‘&lt;em&gt;Retention&lt;/em&gt;’ and &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; as ‘&lt;em&gt;%PI%&lt;/em&gt;’.&lt;/p&gt;

&lt;p&gt;Note: this is only the cost for retention of performance insights data. We will query the cost of API calls for performance insights in the Utilization section.&lt;/p&gt;

&lt;p&gt;-Existence Cost
–Performance Insights Retention Usage
SELECT [lineitem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as pi_cost
FROM cur
WHERE [lineItem/ProductCode] = ‘AmazonRDS’ and [lineItem/LineItemType] is ‘Usage’ and [lineItem/Operation] LIKE ‘Retention’ and [lineItem/UsageType] LIKE ‘%PI%’
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);`&lt;/p&gt;

&lt;h3 id=&quot;database-proxy&quot;&gt;&lt;strong&gt;Database Proxy&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The RDS Proxy is a fully managed, highly available database proxy that makes your application more scalable and resilient to failure. The cost of a DB Proxy is based on the capacity of the underlying instances. The total cost is calculated as &lt;strong&gt;db_proxy_cost&lt;/strong&gt; by filtering &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; as ‘&lt;em&gt;CreateDBProxy%&lt;/em&gt;’ and &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; as ‘&lt;em&gt;%ProxyUsage&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Existence Cost
--RDS Proxy Usage
SELECT [lineitem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as db_proxy_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBProxy%&apos; and [lineItem/UsageType] LIKE &apos;%ProxyUsage&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rds-utilization-cost&quot;&gt;&lt;strong&gt;RDS Utilization Cost&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The activity of your RDS instance determines RDS Utilization costs. The most common types of Utilization costs for RDS instances are data transfer and backup storage costs. In addition to these categories, there are also Utilization costs for Serverless Aurora RDS usage.&lt;/p&gt;

&lt;h3 id=&quot;data-transfer-costs&quot;&gt;&lt;strong&gt;Data Transfer Costs&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Data transfer costs include sending data from your RDS instance out of AWS entirely and sending data between different AWS Services or regions. Small operational changes can cause massive data transfer costs if not done correctly. The queries below will provide analysis for isolating the different types of data transfer costs.&lt;/p&gt;

&lt;h3 id=&quot;data-transfer-for-rds-tofrom-the-internet&quot;&gt;&lt;strong&gt;Data Transfer for RDS to/from the Internet&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Data transfer costs for RDS to/from the internet are charged based on the GB of data being transferred. There is no cost for bringing data from the internet into your AWS environment. There is a tiered pricing model for moving data to the internet, meaning the more data sent, the lower the unit cost.&lt;/p&gt;

&lt;p&gt;This query below calculates the &lt;strong&gt;data_transfer_cost&lt;/strong&gt; by filtering the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; to ‘&lt;em&gt;DataTransfer-%&lt;/em&gt;’. The field &lt;strong&gt;data_transfer_gb&lt;/strong&gt; is also in this query so you can see the amount of data being transferred when there is no cost.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--Data Transfer for RDS to/from the Internet
SELECT [lineitem/ResourceID], [lineItem/UsageType], round(sum([lineItem/UsageAmount]), 4) as data_transfer_gb, round(sum([lineItem/UnblendedCost]), 4) as data_transfer_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] IS &apos;Usage&apos; and [lineItem/Operation] IS &apos;Not Applicable&apos; and [lineItem/UsageType] LIKE &apos;%DataTransfer-%&apos;
GROUP BY [lineitem/ResourceID], [lineItem/UsageType]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;data-transfer-for-rds-tofrom-aws-service-or-region&quot;&gt;&lt;strong&gt;Data Transfer for RDS to/from AWS Service or Region&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If your team sends data between different AWS services or Regions, there may also be costs for that. Using the query below you can calculate the &lt;strong&gt;aws_data_transfer_cost&lt;/strong&gt; by isolating &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; fields that contain ‘&lt;em&gt;%-aws-%&lt;/em&gt;’. I also added the field &lt;strong&gt;aws_data_transfer_gb&lt;/strong&gt; to calculate the data transfer volume.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--Data Transfer for RDS to/from AWS Service or Region
SELECT [lineitem/ResourceID], [lineItem/UsageType], round(sum([lineItem/UsageAmount]), 4) as aws_data_transfer_gb, round(sum([lineItem/UnblendedCost]), 4) as aws_data_transfer_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] IS &apos;Usage&apos; and [lineItem/Operation] IS &apos;Not Applicable&apos; and [lineItem/UsageType] LIKE &apos;%-AWS-%&apos;
GROUP BY [lineitem/ResourceID], [lineItem/UsageType]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;backup-storage&quot;&gt;&lt;strong&gt;Backup Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Backup storage is the cost associated with automated and manual database backups. These costs are charged at a fixed rate of $ per GB per month based on the region the backups are stored in. This query calculates the &lt;strong&gt;backup-storage-cost&lt;/strong&gt; by isolating [lineItem/UsageType] values that contain ‘&lt;em&gt;%ChargedBackupUsage%&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization Cost
--Charged backup usage
SELECT [lineitem/ResourceID], round(sum([lineItem/UsageAmount]), 4) as backup_storage_db, round(sum([lineItem/UnblendedCost]), 4) as backup_storage_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%ChargedBackupUsage%&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aurora-consumption-billing&quot;&gt;&lt;strong&gt;Aurora Consumption Billing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Amazon Aurora allows customers to run Aurora Serverless or to provision an instance for their workloads. Serverless Aurora, Aurora Storage, and I/O have usage-based billing models. The queries below will show how to identify each of these costs.&lt;/p&gt;

&lt;h3 id=&quot;aurora-serverless&quot;&gt;&lt;strong&gt;Aurora Serverless&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Aurora has a serverless offering from AWS that is billed per usage second. This model is great for highly dynamic workloads that don’t require an instance to run at all times. Everything is priced based on usage. The query below compiles the Aurora Serverless costs as &lt;strong&gt;aurora_serverless_cost&lt;/strong&gt; and is identified by isolating &lt;strong&gt;[lineItem_UsageType]&lt;/strong&gt; values that contain ‘&lt;em&gt;Aurora:Serverless%&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--Aurora Serverless Usage
SELECT [lineitem/ResourceID], round(sum([lineItem/UnblendedCost]), 4) as aurora_serverless_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] IS &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] LIKE     &apos;Aurora:Serverless%&apos;
GROUP BY [lineitem/ResourceID]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aurora-storage&quot;&gt;&lt;strong&gt;Aurora Storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Regardless of whether a customer chooses Aurora Serverless or a provisioned database instance, the Storage costs are driven by usage. These costs can be isolated by filtering the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; field for ‘&lt;em&gt;Aurora:StorageUsage&lt;/em&gt;’ values.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--Aurora Storage utilization costs
SELECT [lineitem/ResourceID], [lineItem/UsageType], round(sum([lineItem/UnblendedCost]), 4) as storage_usage_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] IS &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] IS &apos;Aurora:StorageUsage&apos;
GROUP BY [lineitem/ResourceID], [lineItem/UsageType]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aurora-io&quot;&gt;&lt;strong&gt;Aurora I/O&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Whether a customer chooses Aurora Serverless or a provisioned database instance, the I/O costs are based on usage. These costs can be isolated by filtering the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; field for ‘&lt;em&gt;Aurora:StorageIOUsage&lt;/em&gt;’ values.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--Aurora I/O utilization costs
SELECT [lineitem/ResourceID], [lineItem/UsageType], round(sum([lineItem/UnblendedCost]), 4) as io_usage_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] IS &apos;Usage&apos; and [lineItem/Operation] LIKE &apos;CreateDBInstance%&apos; and [lineItem/UsageType] IS     &apos;Aurora:StorageIOUsage&apos;
GROUP BY [lineitem/ResourceID], [lineItem/UsageType]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;api-requests-for-performance-insights&quot;&gt;&lt;strong&gt;API Requests for Performance Insights&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We analyzed the retention costs for performance insights in the existence cost section. The second cost associated with performance insights is the cost per API call. The first 1M API calls are free; after that, the API calls are charged at $0.01 per 1,000 API calls. The count of API calls and the associated costs can be isolated by filtering the &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; field as ‘&lt;em&gt;Call&lt;/em&gt;’ and the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; field by ‘&lt;em&gt;%API%&lt;/em&gt;’.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization
--API Calls for performance insights
SELECT  [lineitem/ResourceID],  round(sum([lineItem/UsageAmount]), 4) as api_call_count,    round(sum([lineItem/UnblendedCost]), 4) as api_call_cost
FROM cur
WHERE   [lineItem/ProductCode] = &apos;AmazonRDS&apos;    and [lineItem/LineItemType] IS &apos;Usage&apos;  and [lineItem/Operation] IS &apos;Call&apos;  and [lineItem/UsageType] LIKE &apos;%API%&apos;
GROUP BY    [lineitem/ResourceID]
ORDER BY    sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;total-rds-instance-cost&quot;&gt;&lt;strong&gt;Total RDS Instance Cost&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;All the queries until now have been used to isolate specific cost categories for RDS resources. This next section will walk through how to isolate specific instances to understand their costs over time. The table below can be used as a reference guide for mapping &lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt; and &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; to cost categories with an explanation of which costs are captured there.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;[lineItem/UsageType]&lt;/th&gt;
      &lt;th&gt;[lineItem/Operation]&lt;/th&gt;
      &lt;th&gt;Cost Category&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;InstanceUsage:%&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Instance Usage. Instance type will be added after ‘:’. Region code can be added at the beginning for international usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multi-AZUsage:%&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Multi-AZ Usage instance usage. Instance type will be added after ‘:’. Region code can be added at the beginning for international usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:GP2-Storage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;GP2 RDS instance storage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:Multi-AZ-GP2-Storage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Multi-AZ GP2 instance storage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:Multi-AZ-PIOPS&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Multi-AZ provisioned IOPS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:Multi-AZ-PIOPS-Storage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Multi-AZ provisioned IOPS storage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:PIOPS&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Provisioned IOPS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:PIOPS-Storage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Provisioned IOPS storage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:StorageUsage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Provisioned magnetic storage (AWS recommends customers should upgrade to GP2).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USE1-RDS:ProxyUsage&lt;/td&gt;
      &lt;td&gt;CreateDBProxy:0002&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Database Proxy costs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USE1:PI_LTR:T3&lt;/td&gt;
      &lt;td&gt;Retention&lt;/td&gt;
      &lt;td&gt;Existence&lt;/td&gt;
      &lt;td&gt;Performance insights retention.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HeavyUsage:%&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;RI Fee&lt;/td&gt;
      &lt;td&gt;RI Fees and reservation information.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USE1:PI_API&lt;/td&gt;
      &lt;td&gt;Call&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;API Requests for Performance Insights.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DataTransfer-In-Bytes&lt;/td&gt;
      &lt;td&gt;Not Applicable&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Data Transfer in from the internet to RDS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DataTransfer-Out-Bytes&lt;/td&gt;
      &lt;td&gt;Not Applicable&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Data Transfer out from RDS to the internet.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USE2-USE1-AWS-In-Bytes&lt;/td&gt;
      &lt;td&gt;Not Applicable&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Data Transfer within AWS between regions. This example has traffic coming ‘In’ between us-east-2 and us-east-1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USE2-USE1-AWS-Out-Bytes&lt;/td&gt;
      &lt;td&gt;Not Applicable&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Data Transfer within AWS between regions. This example has traffic going ‘out’ between us-east-2 and us-east-1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Aurora:ServerlessV2Usage%&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Aurora serverless usage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Aurora:StorageIOUsage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Aurora I/O charged based on usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Aurora:StorageUsage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Aurora Storage charged based on usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:ChargedBackupUsage&lt;/td&gt;
      &lt;td&gt;CreateDBInstance&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Storage for RDS backups.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RDS:ChargedBackupUsage&lt;/td&gt;
      &lt;td&gt;Not Applicable&lt;/td&gt;
      &lt;td&gt;Utilization&lt;/td&gt;
      &lt;td&gt;Storage for RDS backups.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;total-rds-instance-cost-1&quot;&gt;&lt;strong&gt;Total RDS Instance Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;total-cost-by-category&quot;&gt;&lt;strong&gt;Total Cost by Category&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The following query will show total cost by &lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt;, &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt;, and &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt;. Since we potentially include costs from reserved instances, we will have to sum both the &lt;strong&gt;[lineItem/Unblendedcost]&lt;/strong&gt; and &lt;strong&gt;[reservation/EffectiveCost]&lt;/strong&gt; fields. In addition to total costs, since some types of usage are not billed, we also include &lt;strong&gt;[lineItemUsageAmount]&lt;/strong&gt; and the &lt;strong&gt;[pricing/unit]&lt;/strong&gt; to provide visibility into usage.&lt;/p&gt;

&lt;p&gt;This query is limited to analyzing RDS costs and removes any ‘Tax’ expenses from the results.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Total RDS Cost By Category
--Total cost by line item type, operation and usage type.
SELECT [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], round(sum([lineItem/UsageAmount]), 4) as usage_amount, [pricing/unit], round(sum([lineItem/UnblendedCost]    ), 4) as unblended_cost, round(sum([reservation/EffectiveCost]), 4) as reserved_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] &amp;lt;&amp;gt; &apos;Tax&apos;
GROUP BY [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], [pricing/unit]
ORDER BY [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this base query understood, two variations are helpful depending on the specific questions that need to be answered:&lt;/p&gt;

&lt;h3 id=&quot;total-cost-by-rds-instance&quot;&gt;&lt;strong&gt;Total Cost by RDS Instance&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We can see the total cost by instance and resource category if we take the base query and add &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; in the SELECT, GROUP BY, and ORDER BY statements. This query can return a significant number of search results but is helpful when trying to understand which instances are driving your costs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Total RDS Cost by Resource ID and Category
--Total cost by line item type, operation and usage type.
SELECT [lineItem/ResourceId], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], round(sum([lineItem/UsageAmount]), 4) as usage_amount, [pricing/unit], round(sum([    lineItem/UnblendedCost]), 4) as unblended_cost, round(sum([reservation/EffectiveCost]), 4) as reserved_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] &amp;lt;&amp;gt; &apos;Tax&apos;
GROUP BY [lineItem/ResourceId], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], [pricing/unit]
ORDER BY [lineItem/ResourceId], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;total-cost-by-rds-instance-by-hour&quot;&gt;&lt;strong&gt;Total Cost by RDS Instance by Hour&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once you understand which RDS Instances are costing the most in your environment, you can simply add the &lt;strong&gt;[lineItem/UsgaeStartDate]&lt;/strong&gt; field into your query to track costs over time. To isolate the cost of a single RDS instance, remove the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; from the SELECT, GROUP BY, and ORDER BY statements and add it to the WHERE statement with a resource ID. Replace the variable &lt;em&gt;insert-rds-are-here&lt;/em&gt; with the ARN of your RDS instance.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Total RDS Cost by Resource ID and Hour
--Total cost by line item type, operation and usage type.
SELECT [lineItem/UsageStartDate], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], round(sum([lineItem/UsageAmount]), 4) as usage_amount, [pricing/unit], round(    sum([lineItem/UnblendedCost]), 4) as unblended_cost, round(sum([reservation/EffectiveCost]), 4) as reserved_cost
FROM cur
WHERE [lineItem/ProductCode] = &apos;AmazonRDS&apos; and [lineItem/LineItemType] &amp;lt;&amp;gt; &apos;Tax&apos; and [lineItem/ResourceId] is &apos;insert-rds-arn-here&apos;
GROUP BY [lineItem/UsageStartDate], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], [pricing/unit]
ORDER BY [lineItem/UsageStartDate], [lineItem/LineItemType], [lineItem/Operation], [lineItem/UsageType], sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Wed, 13 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/aws-rds-cost-analysis</link>
                <guid isPermaLink="true">http://localhost:4000/aws-rds-cost-analysis</guid>
                
                <category>cloud</category>
                
                <category>dgac</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html&quot;&gt;Elastic Compute Cloud (EC2)&lt;/a&gt; is the backbone of AWS. EC2 allows customers to access hundreds of different instance types across the globe in seconds.&lt;/p&gt;

&lt;h2 id=&quot;how-much-does-amazon-ec2-cost&quot;&gt;&lt;strong&gt;How Much Does Amazon EC2 Cost?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;EC2 is entirely usage based, meaning you can turn instances on and off as needed and only pay by the hour. EC2 costs are complicated because of the different pricing models: on-demand, spot, reserved instances, and savings plans. In addition, there are many types of cost for EC2 instances: hourly RunInstance charges, data transfer, and NAT gateway costs.&lt;/p&gt;

&lt;p&gt;This guide walks through the different types of EC2 costs and how to isolate them using SQL analysis on your Cost and Usage Report (CUR). If you don’t have a CUR active in your account, you can check out &lt;a href=&quot;https://eightlake.com/cost-and-usage-report-setup&quot;&gt;the first guide&lt;/a&gt; which walks through permissions and the process of creating a CUR and our blog on &lt;a href=&quot;https://eightlake.com/aws-cost-and-usage-report-documentation&quot;&gt;cost and usage report documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ec2-cost-categories&quot;&gt;&lt;strong&gt;EC2 Cost Categories&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;To simplify EC2 cost analysis, costs are grouped into three categories: Existence, Utilization and Subresource Cost:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Existence Cost&lt;/strong&gt; - &lt;em&gt;EC2-Instances&lt;/em&gt; in cost explorer - This identifies the cost of having an EC2 instance running regardless of the resource activity. This cost is based on an hourly rate which is determined by the combination of your instance type, region, and whether you’re using contractual reservations or spot instances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Utilization Cost&lt;/strong&gt; - &lt;em&gt;part of&lt;/em&gt; &lt;em&gt;EC2 - Other&lt;/em&gt; in cost explorer - On top of the flat rate for having an instance running, some costs come from how an EC2 instance is utilized. Examples of utilization costs include data transfer and NAT Gateway fees. These costs are driven by a usage-based metric such as $ per GB-month.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subresource Cost&lt;/strong&gt; - &lt;em&gt;the second part of&lt;/em&gt; &lt;em&gt;EC2 - Other&lt;/em&gt; in cost explorer - The types of costs that can be incurred for resources that are attached to or created by your EC2 instances. An easy example for EC2 is EBS Volumes used for storage.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;existence-cost&quot;&gt;&lt;strong&gt;Existence Cost&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Existence costs are the most simple EC2 costs to understand and calculate. Every hour that an EC2 instance is running, there is a cost charged to your account. This cost does not change based on how your resource is used. The AWS &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/&quot;&gt;pricing page for EC2&lt;/a&gt; is a great resource for looking up instance costs based on the pricing model, Region, Operating system, and Instance type.&lt;/p&gt;

&lt;p&gt;To isolate EC2 Existence Costs in the Cost and Usage Report, you must analyze different fields for the different pricing models: On-Demand, Spot, Reserved Instances, and Savings Plans. The following analysis will walk through how to isolate costs for each pricing model and then combine the analysis to provide a total EC2 Existence Cost.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-existence-cost&quot;&gt;&lt;strong&gt;On-Demand Existence Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;On-demand pricing is the published market rate for EC2 usage. If you’re looking for On-demand instance pricing, check out the &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/on-demand/&quot;&gt;Amazon EC2 Instance pricing page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The benefit of on-demand pricing is that there is no commitment for usage and guaranteed availability. Every instance type (instance family + instance size) has a published hourly rate by region.&lt;/p&gt;

&lt;p&gt;The query below can be used to identify the on-demand existence costs by instance type and region:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-On-Demand existence cost
--On-demand existence cost by instance type &amp;amp; region
SELECT [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation    ] LIKE &apos;RunInstances%&apos;
GROUP BY [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the fields in this first analysis are repeatedly used throughout this guide. Below are details on the fields and what the filtered values mean. If there are more questions about any of the fields in the CUR the &lt;a href=&quot;https://docs.aws.amazon.com/cur/latest/userguide/data-dictionary.html&quot;&gt;AWS CUR Data Dictionary&lt;/a&gt; is a pretty good resource.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[product/instanceType]&lt;/strong&gt; will show the EC2 instance type. For example, ‘m5.4xlarge’ and ‘t2.large’. This field cannot be blank for tracking Existence costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[product/region]&lt;/strong&gt; is the region an instance is running in. For example, ‘us-east-1’ and ‘ap-northeast-2’.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UnblendedCost]&lt;/strong&gt; is the most commonly used cost field in the CUR. This field takes the hourly rate for that period, &lt;em&gt;[lineItem/UnblendedRate]&lt;/em&gt;, and multiplies it by the usage for that period, &lt;em&gt;[lineItem/UsageAmount]&lt;/em&gt;. This cost being unblended means we are looking at the specific cost for each resource, during each time period on the CUR. This is the most accurate way to isolate your costs for on-demand instances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/ProductCode]&lt;/strong&gt; is used to identify the AWS product being measured. ‘AmazonEC2’ is the product code for EC2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItemLineItemType]&lt;/strong&gt; will show the type of charge that is hitting this line item. There are line item types for everything from ‘Usage’ to ‘Tax’ and ‘Refund’. ‘Usage’ will indicate this charge is either for on-demand or spot instances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt;, according AWS documentation, shows details on the line item. For this analysis specifically, the usage type field will show whether the usage is on-demand or spot usage. &lt;em&gt;%BoxUsage%&lt;/em&gt; indicates this line item was billed with the on-demand pricing model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineitem/Operation]&lt;/strong&gt; details the AWS Operation covered by a line item. For EC2, ‘RunInstances’ tells us this is the operation of running an EC2 instance. If you require details down to the specific operating system, the codes that come after ‘RunInstances’ can be used to filter down to &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html&quot;&gt;specific AMIs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the size of your AWS environment you may also want to see a list of all the active EC2 resources and their associated costs. Any time you want to track individual resources, add in the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; field:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-On-Demand existence cost
--On-demand existence cost by resource ID
SELECT [lineItem/ResourceId], [product/region], round(sum([lineItem/UnblendedCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation    ] LIKE &apos;RunInstances%&apos;
GROUP BY [lineItem/ResourceId], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spot-existence-cost&quot;&gt;&lt;strong&gt;Spot Existence Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Spot instances are priced based on a secondary market for EC2 usage. Spot pricing can provide a massive discount (upwards of 90%) compared to on-demand pricing. Unfortunately, instances are not always available, and the pricing will change based on market demand.&lt;/p&gt;

&lt;p&gt;Most production architectures will avoid utilizing spot instances since they shut off when there is no availability. Under the right circumstances, Spot instances are an awesome opportunity for savings.&lt;/p&gt;

&lt;p&gt;The query below can be used to identify the spot existence costs by instance type and region:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Spot existence cost
--Spot existence cost by instance type, region
SELECT [product/instanceType], [product/region], round(sum([lineItem/UnblendedCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/    Operation] LIKE &apos;RunInstances%&apos;
GROUP BY [product/instanceType], [product/region]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only major difference between the on-demand and spot queries is the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; and &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; fields. The [lineItem/Operation] field will show &lt;em&gt;RunInstances:SV%&lt;/em&gt; and [lineItem/UsageType] will show &lt;em&gt;%SpotUsage%&lt;/em&gt; to indicate these line items are attributed to spot instances.&lt;/p&gt;

&lt;p&gt;The query above will show the total blended cost, but since the spot instance rates can change hourly, you may want to pull detail on how instance unit costs have changed over time. To see the variance in hourly or daily spot instance rates, use the query below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Spot existence cost
--Spot existence by usage start date, instance type, region
SELECT [lineItem/UsageStartDate], [product/instanceType], [product/region], [lineItem/UnblendedCost]/[lineItem/UsageAmount] as spot_rate
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/    Operation] LIKE &apos;RunInstances:SV%&apos;
GROUP BY [product/instanceType], [lineItem/UsageStartDate], [product/region]
ORDER BY [lineItem/UnblendedCost]/[lineItem/UsageAmount];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two meaningful changes to this query:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UsageStartDate]&lt;/strong&gt; was added and will show the day and hour when the instance usage started. This will add a lot of detail to your query result, but this can be useful for tracking unit costs over time for a specific instance type and region.&lt;/li&gt;
  &lt;li&gt;The CUR doesn’t calculate any rate fields for spot instance usage. To address this, we have a calculated field &lt;strong&gt;spot_rate&lt;/strong&gt; that calculates a rate based on the &lt;strong&gt;[lineItem/UnblendedCost]&lt;/strong&gt; and the &lt;strong&gt;[lineItem/UsageAmount]&lt;/strong&gt;. If you group by instance type and region, this will show the average rate for that instance type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reserved-instance-existence-cost&quot;&gt;&lt;strong&gt;Reserved Instance Existence Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Reserved Instances (RIs) are a tool offered by AWS that allows customers to reduce their spending on specific services if they make long term commitments. Term commitments for EC2 Reserved Instances are either 1-year or 3-years. Like all other AWS discounts, discount size increases with usage commitments and specificity of use.&lt;/p&gt;

&lt;p&gt;RIs on EC2 instances are very common, but cost tooling offered by AWS obfuscates exactly what your RIs are covering and what the real costs are.&lt;/p&gt;

&lt;p&gt;Reserved instance costs are not allocated to instances in AWS’ Cost Explorer. If your team uses reserved instances, the costs shown for those instances will be $0, which is obviously not true. The query below outlines how to see what types of resources your reserved instance contracts are covering and the associated costs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Reserved instance existence cost
--Reserved instance existence cost by instance type, region
SELECT [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos;
GROUP BY [product/instanceType], [product/region]
ORDER BY sum([reservation/EffectiveCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are several changes to how you isolate RI costs compared to on-demand and spot costs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For &lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt;, the value denoting the use of reserved instances is &lt;em&gt;‘DiscountedUsage’&lt;/em&gt; instead of &lt;em&gt;‘Usage’&lt;/em&gt; that we saw for on-demand and spot instances.&lt;/li&gt;
  &lt;li&gt;Instead of using &lt;strong&gt;[lineItem/UnblendedCost]&lt;/strong&gt; for the total cost, this query uses &lt;strong&gt;[reservation/EffectiveCost]&lt;/strong&gt;. This field will add together two costs that are critical for accurately tracking RI costs:&lt;/li&gt;
  &lt;li&gt;Hourly amortization of any upfront fees: If your team purchases any RIs that include an upfront fee, that cost needs to be spread out over the duration of the RI contract. For example, if you pay $8,760 in upfront fees for a 1-year contract, that is amortized to $1 per hour for every hour of the year (there are 8,760 hours in 1 year).&lt;/li&gt;
  &lt;li&gt;Hourly fee: If your team purchases any RIs that include an hourly fee, this needs to be added into the amortization of upfront fees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To provide a little more detail, here are the different payment options offered for AWS Reservations and whether the payment options include upfront and hourly fees. The more upfront fees a customer commits to, the higher the discount on the reservation contract.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Payment Options&lt;/th&gt;
      &lt;th&gt;Upfront Fees?&lt;/th&gt;
      &lt;th&gt;Hourly Fees?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;All Upfront&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Partial Upfront&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;No Upfront&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To keep track of all the different reservations in an account or group of accounts, every reservation has a unique &lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt;. The field &lt;strong&gt;[reservation/ReservationARN]&lt;/strong&gt; can be added into the analysis to show the count and total effective cost of reservations active in your account. If there is a specific reservation you want details on, the &lt;strong&gt;[reservation/ReservationARN]&lt;/strong&gt; field can be added to the &lt;em&gt;WHERE&lt;/em&gt; clause with a specific reservation ARN or a list of reservation ARNs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Reserved instance existence cost
--Reserved instance ARN information
SELECT [reservation/ReservationARN], [product/instanceType], [product/region], round(sum([reservation/EffectiveCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos;
GROUP BY [reservation/ReservationARN], [product/instanceType], [product/region]
ORDER BY sum([reservation/EffectiveCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;savings-plan-existence-cost&quot;&gt;&lt;strong&gt;Savings Plan Existence Cost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Savings plans are AWS’ latest and greatest reservation tool. There are some serious benefits to savings plans compared to reserved instances, to name a few: compute savings plans work cross-region and cover serverless compute services like Fargate and Lambda in addition to EC2. For the purposes of this guide, there is no difference between the cost analysis for EC2 and Compute Savings plans.&lt;/p&gt;

&lt;p&gt;The analysis for Savings Plan existence cost looks very similar to reserved instance existence costs, but we will filter the fields on slightly different values. This first query will show you what resources your savings plans are covering and their costs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Savings plan existence cost
--Savings plan existence cost by instance type, region
SELECT [product/instanceType], [product/region], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos;
GROUP BY [product/instanceType], [product/region]
ORDER BY sum([savingsPlan/SavingsPlanEffectiveCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are again changes to the fields and values we filter on for Savings Plan costs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Similar to the &lt;strong&gt;[reservation/EffectiveCost]&lt;/strong&gt; field, the &lt;strong&gt;[savingsPlan/SavingsPlanEffectiveCost]&lt;/strong&gt; field will combine the upfront and hourly fees associated with savings plans. Savings Plans and Reserved Instances have the same payment options, so the upfront and hourly fee combinations are the same.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;[lineItem/LineItemType]&lt;/strong&gt; the value &lt;em&gt;‘SavingsPlanCoveredUsage’&lt;/em&gt; will identify any line item that a Savings Plan covers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar to Reserved Instances, Savings Plans also have an Amazon Resource Name (ARN) that can be tracked on the Cost and Usage Report. The query below will isolate all active Savings Plans reservations using the &lt;strong&gt;[savingsPlan/SavingsPlanARN]&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Savings plan existence cost
--Savings plan ARN information
SELECT [savingsPlan/SavingsPlanARN], [product/region], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost
FROM CUR
WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos;
GROUP BY [savingsPlan/SavingsPlanARN], [product/region]
ORDER BY sum([savingsPlan/SavingsPlanEffectiveCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;total-existence-cost-for-ec2&quot;&gt;&lt;strong&gt;Total Existence Cost for EC2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The final step for understanding the Existence Cost for EC2 is to bring all the pricing models together to get a &lt;strong&gt;total EC2 existence cost&lt;/strong&gt;. This query is handy when trying to understand what percentage of your infrastructure is covered with reservations, which regions you’re spending the most money in, and which EC2 instance types your teams are using most.&lt;/p&gt;

&lt;p&gt;The queries below will show all resource IDs, the instance type and region of that resource, a calculated column for each EC2 existence cost type, and a calculated field for &lt;strong&gt;TotalExistenceCost&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    -Total existence cost for EC2
    --Total existence cost by resource ID
    WITH on_demand_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [    product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/    ResourceId]
    )
    , spot_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/    instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/ResourceId]
    )
    , reserved_existence AS ( SELECT [lineItem/ResourceId], round(sum([reservation/EffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product    /instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; GROUP BY [lineItem/ResourceId]
    )
    , savings_plan_existence AS ( SELECT [lineItem/ResourceId], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] =     &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos; GROUP BY [lineItem/ResourceId]
    )
    SELECT CUR.[lineitem/ResourceId], CUR.[product/instanceType], CUR.[product/region], COALESCE(on_demand_existence.existence_cost, 0) as on_demand_existence_cost, COALESCE(spot_    existence.existence_cost, 0) as spot_existence_cost, COALESCE(reserved_existence.existence_cost, 0) as reserved_existence_cost, COALESCE(savings_plan_existence.existence_cost, 0)     as savings_plan_existence_cost, (COALESCE(on_demand_existence.existence_cost, 0) + COALESCE(spot_existence.existence_cost, 0) + COALESCE(reserved_existence.existence_cost, 0) +     COALESCE(savings_plan_existence.existence_cost, 0)) AS total_existence_cost
    FROM CUR
    LEFT JOIN on_demand_existence ON on_demand_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
    LEFT JOIN spot_existence ON spot_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
    LEFT JOIN reserved_existence ON reserved_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
    LEFT JOIN savings_plan_existence ON savings_plan_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
    WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
    GROUP BY CUR.[lineitem/ResourceId], CUR.[product/instanceType], CUR.[product/region]
    ORDER BY total_existence_cost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This first query will show results for each individual resource using the &lt;strong&gt;[lineItem/ResourceId]&lt;/strong&gt; field. In addition to the resource ID, there are other columns that provide details on the resource and the costs for different pricing models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[product/instanceType]&lt;/strong&gt; and &lt;strong&gt;[product/region]&lt;/strong&gt; identify the type of instance and where the resource was used.&lt;/li&gt;
  &lt;li&gt;There are five calculated cost columns:&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;on_demand_existence_cost&lt;/strong&gt; is the total cost for this resource with the on-demand pricing model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spot_existence_cost&lt;/strong&gt; is the total cost for this resource with the spot pricing model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;reserved_existence_cost&lt;/strong&gt; is the total cost for this resource when covered by Reserved Instance reservations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;savings_plan_existence_cost&lt;/strong&gt; is the total cost for this resource when covered by Savings Plans.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;total_existence_cost&lt;/strong&gt; is the sum of all pricing model costs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes when working with large environments, showing the data for every individual resource is not helpful. This next query removes the &lt;strong&gt;[lineItem/ResourceId]&lt;/strong&gt; field from the query results and instead groups costs by the &lt;strong&gt;[product/instanceType]&lt;/strong&gt; and &lt;strong&gt;[product/region]&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Total existence cost for EC2
--Total existence cost by instance type, region
WITH on_demand_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [    product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/    ResourceId]
)
, spot_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/    instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/ResourceId]
)
, reserved_existence AS ( SELECT [lineItem/ResourceId], round(sum([reservation/EffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product    /instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; GROUP BY [lineItem/ResourceId]
)
, savings_plan_existence AS ( SELECT [lineItem/ResourceId], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] =     &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos; GROUP BY [lineItem/ResourceId]
)
SELECT CUR.[product/instanceType], CUR.[product/region], COALESCE(on_demand_existence.existence_cost, 0) as on_demand_existence_cost, COALESCE(spot_existence.existence_cost, 0) as     spot_existence_cost, COALESCE(reserved_existence.existence_cost, 0) as reserved_existence_cost, COALESCE(savings_plan_existence.existence_cost, 0) as savings_plan_existence_cost, (    COALESCE(on_demand_existence.existence_cost, 0) + COALESCE(spot_existence.existence_cost, 0) + COALESCE(reserved_existence.existence_cost, 0) + COALESCE(savings_plan_    existence.existence_cost, 0)) AS total_existence_cost
FROM CUR
LEFT JOIN on_demand_existence ON on_demand_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN spot_existence ON spot_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN reserved_existence ON reserved_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN savings_plan_existence ON savings_plan_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
GROUP BY CUR.[product/instanceType], CUR.[product/region]
ORDER BY total_existence_cost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;utilization-costs&quot;&gt;&lt;strong&gt;Utilization Costs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we understand how to calculate the Existence Costs for EC2, the next section of this guide will analyze costs that are driven by the way a resource is utilized. Utilization costs are the first half of the fabled ‘EC2 - Other’ category of AWS costs.&lt;/p&gt;

&lt;p&gt;The key takeaway about Utilization costs is these costs are driven by usage. This can cause the hourly Utilization cost of a resource to vary drastically. Below are the main categories of Utilization costs and a brief description of what these costs are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Inter-Zone&lt;/strong&gt;: These are the costs associated with transferring data ‘In’ or ‘Out’ of EC2. Data transfer ‘In’ from the internet is free, but there are charges for data transfer ‘out’ to either the internet or other AWS Services. If you want to see the costs from AWS that show data transfer charges from EC2 to each region or product, those are posted on the &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/on-demand/&quot;&gt;EC2 pricing page&lt;/a&gt; under Data Transfer pricing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Public-IP&lt;/strong&gt;: These track the costs of transferring data ‘in’ or ‘out’ from a public or Elastic IPv4 address. This is charged at $0.01/GB in each direction.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VPC-Peering&lt;/strong&gt;: VPC Peering connections between the VPCs allow you to route traffic between them using private IP Addresses. All VPC Peering connections in the same AWS Region are charged at $0.01/GB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these three categories in mind, the query below shows all EC2 utilization costs that can be tied directly to an instance.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization Costs
--Utilization costs for EC2 by line item operation
SELECT [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as utilization_cost
FROM CUR
WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;i-%&apos; and [lineItem/UsageType] NOT LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] NOT LIKE &apos;RunInstances%&apos;     and [lineItem/LineItemType] is &apos;Usage&apos;
GROUP BY [lineItem/LineItemType], [lineItem/Operation]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we are focused on Utilization costs, the analysis will filter out different variables than when focusing on Existence costs. Basically, we want to look at costs associated with EC2 instances that are NOT Existence costs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; is the main field that can be used to categorize Utilization costs.&lt;/li&gt;
  &lt;li&gt;To make sure all the costs being isolated are still associated with EC2 instances, the &lt;strong&gt;[lineItem/ResourceId]&lt;/strong&gt; is filtered to only include resource IDs that contain &lt;em&gt;i-%&lt;/em&gt;, which is the nomenclature from AWS to identify EC2 instances.&lt;/li&gt;
  &lt;li&gt;Lastly, any Existence cost needs to be filtered out of this analysis:&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[LineItem/UsageType]&lt;/strong&gt; is filtered by removing &lt;em&gt;%BoxUsage%&lt;/em&gt; from the calculated costs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; is filtered by removing &lt;em&gt;RunInstances%&lt;/em&gt; from the calcualted costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this base query, you can filter down to an individual instance, account, tag, or any other operational identifier that is helpful. The example below adds &lt;strong&gt;[lineItem/UsageStartDate]&lt;/strong&gt; to the SELECT clause to show costs by hour and the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; to the WHERE clause to identify the Utilization costs by cost type for a single resource.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization Costs
--Utilization costs for EC2 by usage stard date and line item operation
SELECT [lineItem/UsageStartDate], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as utilization_cost
FROM CUR
WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] is &apos;i-XXXXXXXXXXXXXXXX&apos; and [lineItem/UsageType] NOT LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] NOT LIKE     &apos;RunInstances%&apos; and [lineItem/LineItemType] is &apos;Usage&apos;
GROUP BY [lineItem/UsageStartDate], [lineItem/Operation]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, if a you wants to see the Utilization costs for all the instances in their environment, the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; field can be added in the SELECT clause:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Utilization Costs
--Utilization costs for EC2 by resource ID
SELECT [lineItem/ResourceId], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as resource_utilization_cost
FROM CUR
WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;i-%&apos; and [lineItem/UsageType] NOT LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] NOT LIKE &apos;RunInstances%&apos;     and [lineItem/LineItemType] is &apos;Usage&apos;
GROUP BY [lineItem/ResourceId], [lineItem/Operation]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;total-resource-cost-for-ec2&quot;&gt;&lt;strong&gt;Total Resource Cost for EC2&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After finishing the analysis of Existence and Utilization costs for EC2 instances, the two costs can be combined to provide a &lt;strong&gt;full resource cost&lt;/strong&gt; for any EC2 instance.&lt;/p&gt;

&lt;p&gt;First, calculate the total EC2 instance cost grouped by each EC2 resource using &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt;. This will return a significant amount of data with a line for each EC2 instance that was active during the period being analyzed.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Total Resource Cost for EC2
--Combine existence and utilization costs to get a total EC2 instance cost by EC2 resource ID.
WITH resource_existence_cost AS (
WITH on_demand_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [    product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/    ResourceId]
)
, spot_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/    instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/ResourceId]
)
, reserved_existence AS ( SELECT [lineItem/ResourceId], round(sum([reservation/EffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product    /instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; GROUP BY [lineItem/ResourceId]
)
, savings_plan_existence AS ( SELECT [lineItem/ResourceId], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] =     &apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos; GROUP BY [lineItem/ResourceId]
)
SELECT CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region], COALESCE(on_demand_existence.existence_cost, 0) as on_demand_existence_cost, COALESCE(spot_    existence.existence_cost, 0) as spot_existence_cost, COALESCE(reserved_existence.existence_cost, 0) as reserved_existence_cost, COALESCE(savings_plan_existence.existence_cost, 0)     as savings_plan_existence_cost, (COALESCE(on_demand_existence.existence_cost, 0) + COALESCE(spot_existence.existence_cost, 0) + COALESCE(reserved_existence.existence_cost, 0) +     COALESCE(savings_plan_existence.existence_cost, 0)) AS total_existence_cost
FROM CUR
LEFT JOIN on_demand_existence ON on_demand_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN spot_existence ON spot_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN reserved_existence ON reserved_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN savings_plan_existence ON savings_plan_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
GROUP BY CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region]
)
, resource_utilization_cost AS (
SELECT [lineItem/ResourceId], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as total_utilization_cost
FROM CUR
WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;i-%&apos; and [lineItem/UsageType] NOT LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] NOT LIKE &apos;RunInstances%&apos;     and [lineItem/LineItemType] is &apos;Usage&apos;
GROUP BY [lineItem/ResourceId], [lineItem/Operation]
)
SELECT CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region], COALESCE(resource_existence_cost.total_existence_cost, 0) as total_existence_cost, COALESCE(    resource_utilization_cost.total_utilization_cost, 0) as total_utilization_cost, (COALESCE(resource_existence_cost.total_existence_cost, 0) + COALESCE(resource_utilization_cost.total    _utilization_cost, 0)) AS ec2_total_cost
FROM CUR
LEFT JOIN resource_existence_cost ON resource_existence_cost.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
LEFT JOIN resource_utilization_cost ON resource_utilization_cost.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
GROUP BY CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region]
ORDER BY total_existence_cost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Second, if the data per resource is too complex, this query will calculate the total EC2 instance cost grouped by instance type using &lt;strong&gt;[product/instanceType]&lt;/strong&gt; and by region using &lt;strong&gt;[product/region]&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`-Total Resource Cost for EC2
`--Combine existence and utilization costs to get a total EC2 instance cost grouped by instance type and region.
`WITH resource_existence_cost AS (
`WITH on_demand_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [    `product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/    `ResourceId]
`)
`, spot_existence AS ( SELECT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product/    `instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;Usage&apos; and [lineItem/UsageType] LIKE &apos;%SpotUsage%&apos; and [lineItem/Operation] LIKE &apos;RunInstances%&apos; GROUP BY [lineItem/ResourceId]
`)
`, reserved_existence AS ( SELECT [lineItem/ResourceId], round(sum([reservation/EffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] = &apos;AmazonEC2&apos; and [product    `/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;DiscountedUsage&apos; GROUP BY [lineItem/ResourceId]
`)
`, savings_plan_existence AS ( SELECT [lineItem/ResourceId], round(sum([savingsPlan/SavingsPlanEffectiveCost]), 4) as existence_cost FROM CUR WHERE [lineItem/ProductCode] =     `&apos;AmazonEC2&apos; and [product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and [lineItem/LineItemType] is &apos;SavingsPlanCoveredUsage&apos; GROUP BY [lineItem/ResourceId]
`)
`SELECT CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region], COALESCE(on_demand_existence.existence_cost, 0) as on_demand_existence_cost, COALESCE(spot_    `existence.existence_cost, 0) as spot_existence_cost, COALESCE(reserved_existence.existence_cost, 0) as reserved_existence_cost, COALESCE(savings_plan_existence.existence_cost,0) as     `savings_plan_existence_cost, (COALESCE(on_demand_existence.existence_cost, 0) + COALESCE(spot_existence.existence_cost, 0) + COALESCE(reserved_existence.existence_cost, 0) +     `COALESCE(savings_plan_existence.existence_cost, 0)) AS total_existence_cost
`FROM CUR
`LEFT JOIN on_demand_existence ON on_demand_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`LEFT JOIN spot_existence ON spot_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`LEFT JOIN reserved_existence ON reserved_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`LEFT JOIN savings_plan_existence ON savings_plan_existence.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
`GROUP BY CUR.[lineItem/ResourceId], CUR.[product/instanceType], CUR.[product/region]
`)
`, resource_utilization_cost AS (
`SELECT [lineItem/ResourceId], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as total_utilization_cost
`FROM CUR
`WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;i-%&apos; and [lineItem/UsageType] NOT LIKE &apos;%BoxUsage%&apos; and [lineItem/Operation] NOT LIKE &apos;RunInstances%&apos;     `and [lineItem/LineItemType] is &apos;Usage&apos;
`GROUP BY [lineItem/ResourceId], [lineItem/Operation]
`)
`SELECT CUR.[product/instanceType], CUR.[product/region], COALESCE(resource_existence_cost.total_existence_cost, 0) as total_existence_cost, COALESCE(resource_utilization_cost.total_    `utilization_cost, 0) as total_utilization_cost, (COALESCE(resource_existence_cost.total_existence_cost, 0) + COALESCE(resource_utilization_cost.total_utilization_cost, 0)) AS ec2_    `total_cost
`FROM CUR
`LEFT JOIN resource_existence_cost ON resource_existence_cost.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`LEFT JOIN resource_utilization_cost ON resource_utilization_cost.[lineItem/ResourceId] = CUR.[lineItem/ResourceId]
`WHERE CUR.[lineItem/ProductCode] is &apos;AmazonEC2&apos; and CUR.[product/instanceType] &amp;lt;&amp;gt; &quot;&quot; and CUR.[lineitem/ResourceId] &amp;lt;&amp;gt; &quot;&quot;
`GROUP BY CUR.[product/instanceType], CUR.[product/region]
`ORDER BY total_existence_cost;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;subresource-costs&quot;&gt;&lt;strong&gt;Subresource Costs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The last component of EC2 cost analysis is also the second half of the EC2-Other category that is isolated as Subresource costs. This is usually the most confusing cost category because it focuses on resources that are not EC2 instances but are created by or directly interact with your EC2 Instances. A common example of an EC2 subresource is Elastic Block Store (EBS) volumes. EBS volumes are their own resources, with unique resource IDs, but are included in the EC2-Other cost category.&lt;/p&gt;

&lt;p&gt;The main difference between Subresource cost analysis compared to Existence and Utilization costs is that Subresource cost analysis aggregates costs for resources that are not EC2 instances. Specifically, this analysis isolates costs for EBS Volumes, EBS Snapshots, and Nat Gateways, which all are considered part of the &lt;em&gt;AmazonEC2&lt;/em&gt; product code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Subresource Costs
--Subresource costs by Resource ID
SELECT DISTINCT [lineItem/ResourceId], round(sum([lineItem/UnblendedCost]), 4) as subresource_cost
FROM CUR
WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] NOT LIKE &apos;i-%&apos;
GROUP BY [lineItem/ResourceId]
ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query for Subresource costs has two main differences from any of the queries previously in this guide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is no mention of the &lt;strong&gt;[lineItem/UsageType]&lt;/strong&gt; or &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; fields because this query is trying to isolate the total cost of each Subresource.&lt;/li&gt;
  &lt;li&gt;The filter for &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; is specifically filtering out any results that contain &lt;em&gt;i-%&lt;/em&gt;, which means the analysis is removing any EC2 Instances from the search results.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[lineItem/UnblendedCost]&lt;/strong&gt; is the cost field for all Subresources. None of the Subresources can be impacted by reservations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this total cost by &lt;strong&gt;[lineItem/ResourceId]&lt;/strong&gt;, we can take it a step further and break down the analysis to isolate the different types of subresources and use &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; to isolate the different cost types. The following three queries list all the resources and costs for the specified resource type.&lt;/p&gt;

&lt;h3 id=&quot;ebs-volumes&quot;&gt;&lt;strong&gt;EBS Volumes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;EBS volumes are identified by filtering the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; field for items that contain &lt;em&gt;vol-%&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are two main types of costs for EBS Volumes that show up in the &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; field:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IO Usage: read and write costs.&lt;/li&gt;
  &lt;li&gt;CreateVolume: costs for creating provisioned EBS Volumes.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -Subresource Costs
  --Subresource costs for EBS Volumes
  SELECT DISTINCT [lineItem/ResourceID], [lineItem/LineItemType], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as subresource_cost
  FROM CUR
  WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;vol-%&apos;
  GROUP BY [lineItem/ResourceID], [lineitem/lineitemtype], [lineItem/Operation]
  ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ebs-volume-snapshots&quot;&gt;&lt;strong&gt;EBS Volume Snapshots&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;EBS Volume snapshots are identified by filtering the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; field for items that contain &lt;em&gt;%snapshot%&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Only one main cost category for EBS Volume Snapshots shows up in the &lt;strong&gt;[lineItem/Operation]&lt;/strong&gt; field: CreateSnapshot, which captures the cost per GB for storing snapshots.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -Subresource Costs
  --Subresource costs for EBS Volume Snapshots
  SELECT DISTINCT [lineItem/ResourceID], [lineItem/LineItemType], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as subresource_cost
  FROM CUR
  WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;%snapshot%&apos;
  GROUP BY [lineItem/ResourceID], [lineitem/lineitemtype], [lineItem/Operation]
  ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;nat-gateways&quot;&gt;&lt;strong&gt;NAT Gateways&lt;/strong&gt;&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;NAT Gateways are identified by filtering the &lt;strong&gt;[lineItem/ResourceID]&lt;/strong&gt; field for items that contain &lt;em&gt;%natgateway%&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;There are many different cost categories for NAT Gateways, but they are largely driven by data transfer or data processing fees.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    -Subresource Costs
    --Subresource costs for NAT Gateways
    SELECT DISTINCT [lineItem/ResourceID], [lineItem/LineItemType], [lineItem/Operation], round(sum([lineItem/UnblendedCost]), 4) as subresource_cost
    FROM CUR
    WHERE [lineItem/ProductCode] is &apos;AmazonEC2&apos; and [lineItem/ResourceId] LIKE &apos;%natgateway%&apos;
    GROUP BY [lineItem/ResourceID], [lineitem/lineitemtype], [lineItem/Operation]
    ORDER BY sum([lineItem/UnblendedCost]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Tue, 12 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/aws-ec2-cost-analysis</link>
                <guid isPermaLink="true">http://localhost:4000/aws-ec2-cost-analysis</guid>
                
                <category>cloud</category>
                
                <category>dgac</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;This Cost and Usage Report overview will go through the required IAM permissions for billing analysis, how to create a cost and usage report (CUR), and how to set up a local analysis environment using SQLite3.&lt;/p&gt;

&lt;p&gt;If you have questions, feedback, or other AWS Billing problems you’d like to discuss, you can &lt;a href=&quot;mailto:brian@eightlake.com&quot;&gt;contact our team&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;iam-permissions&quot;&gt;&lt;strong&gt;IAM Permissions&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Identity and Access Management (IAM) permissions get complicated very quickly. The advantage of using Sqlite3 and doing local analysis is minimizing permissions and access needed in your AWS Account. The best way to track access to billing is to create an IAM role for engineers with access to billing information. The IAM permissions below practice the ‘least privilege principle’ for anyone in your engineering team that needs to perform billing analysis.&lt;/p&gt;

&lt;p&gt;First, this policy allows users to access the billing console and create, modify or delete CURs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;aws-portal:ViewUsage&quot;,
        &quot;aws-portal:ViewBilling&quot;,
        &quot;cur:DescribeReportDefinitions&quot;,
        &quot;cur:PutReportDefinition&quot;,
        &quot;cur:DeleteReportDefinition&quot;,
        &quot;cur:ModifyReportDefinition&quot;
      ],
      &quot;Resource&quot;: &quot;*&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Second, these are the permissions to list S3 buckets and download CUR files for analysis. Depending on the resources in the account, it may make sense to limit the resources this policy provides access to.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
      {
        &quot;Effect&quot;: &quot;Allow&quot;,
        &quot;Action&quot;: [
          &quot;s3:GetBucketPolicyStatus&quot;,
          &quot;s3:GetBucketTagging&quot;,
          &quot;s3:ListBucketVersions&quot;,
          &quot;s3:PutBucketOwnershipControls&quot;,
          &quot;s3:CreateBucket&quot;,
          &quot;s3:ListBucket&quot;,
          &quot;s3:GetBucketAcl&quot;,
          &quot;s3:GetBucketPolicy&quot;,
          &quot;s3:GetObjectAcl&quot;,
          &quot;s3:GetObject&quot;,
          &quot;s3:GetAccountPublicAccessBlock&quot;,
          &quot;s3:ListAllMyBuckets&quot;,
          &quot;s3:PutBucketPolicy&quot;,
          &quot;s3:GetBucketLocation&quot;,
          &quot;s3:GetObjectVersion&quot;
         ],
         &quot;Resource&quot;: &quot;*&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cost-and-usage-report-documentation&quot;&gt;&lt;strong&gt;Cost and Usage Report Documentation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;As part of the Developer’s Guide to AWS Costs, we have added a &lt;a href=&quot;https://eightlake.com/aws-cost-and-usage-report-documentation&quot;&gt;Cost and Usage Report Documentation&lt;/a&gt; blog post to our website. For the over 200 fields in the Cost and Usage Report, this document will describe the field and provide sample values to help developers analyze their specific use cases.&lt;/p&gt;

&lt;p&gt;This document is always a work in progress. If there are questions or comments on the information in the documentation, please let us know in our &lt;a href=&quot;https://github.com/getstrake/developer-cost-guide/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;creating-a-cost-and-usage-report&quot;&gt;&lt;strong&gt;Creating a Cost and Usage Report&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;As noted in the introduction, the main data source used for cost analysis is the Cost and Usage Report (CUR). This is the most detailed billing report offered by AWS and is the ‘source of truth’ for what your account is being charged at the end of the month.&lt;/p&gt;

&lt;p&gt;The following steps will walk through how to create a new Cost and Usage Report:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Navigating to the billing console.&lt;/li&gt;
  &lt;li&gt;Selecting data and storage options.&lt;/li&gt;
  &lt;li&gt;Verifying that the report was created properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1navigate-to-the-billing-console&quot;&gt;&lt;strong&gt;Step 1: Navigate to the Billing Console&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;First, go to &lt;a href=&quot;https://www.aws.amazon.com/&quot;&gt;aws.amazon.com&lt;/a&gt; and &lt;strong&gt;click Sign In&lt;/strong&gt; in the top right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-1.jpg&quot; alt=&quot;Setup 1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-log-in-to-aws&quot;&gt;&lt;strong&gt;Step 2: Log in to AWS&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Enter your Account ID, IAM user name, and password&lt;/strong&gt;. If you don’t have MFA set up for your account, you should. MFA is the best way to make sure &lt;a href=&quot;https://www.reddit.com/r/aws/comments/rvi9a8/thanks_to_all_of_the_my_account_was_hacked_posts/&quot;&gt;your account doesn’t get hacked&lt;/a&gt;. Then &lt;strong&gt;click Sign In&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not which account is being used&lt;/strong&gt;. First, engineers should understand how AWS Organizations impact your CUR. Management and member accounts of an organization can each have their own CUR enabled. Management accounts with a CUR will show details for the management account and all member accounts in the organization, while a member account with a CUR will only show details for that account.&lt;/p&gt;

&lt;p&gt;As an engineer, it is important to understand whether it is necessary to see costs in a specific account or across all your accounts. Second, ensure the account being used is covered in the IAM permissions for the newly created IAM role.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-2.jpg&quot; alt=&quot;Setup 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-search-for-billing&quot;&gt;&lt;strong&gt;Step 3: Search for Billing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;At the top of the AWS Management Console, in the search bar, &lt;strong&gt;search for billing&lt;/strong&gt; and &lt;strong&gt;click on Billing&lt;/strong&gt; under Services in the search results. This will bring you to the AWS Billing Dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-3.jpg&quot; alt=&quot;Setup 3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-navigate-to-the-cost--usage-reports-page&quot;&gt;&lt;strong&gt;Step 4: Navigate to the ‘Cost &amp;amp; Usage Reports’ Page&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once on the AWS Billing Dashboard, &lt;strong&gt;click Cost &amp;amp; Usage Reports in the left banner&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-4.jpg&quot; alt=&quot;Setup 4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-create-a-new-cost-and-usage-report&quot;&gt;&lt;strong&gt;Step 5: Create a new Cost and Usage Report&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This page will show you all the active CURs in your account and give users the ability to create a new report. For this demo account there are no active CURs. To create a new CUR, &lt;strong&gt;click on the blue Create Report button&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-5.jpg&quot; alt=&quot;Setup 5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-6-report-content&quot;&gt;&lt;strong&gt;Step 6: Report Content&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;On the &lt;em&gt;‘Report Content’&lt;/em&gt; page, &lt;strong&gt;choose a report name&lt;/strong&gt; (I chose ‘diy-biling’), &lt;strong&gt;check the box to Include resource IDs&lt;/strong&gt;, and &lt;strong&gt;click Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Checking the box next to &lt;em&gt;Include resource IDs&lt;/em&gt; will add a field to the CUR that will show a unique resource ID for all resources active in your environment. This will make the report much larger, but the level of detail is crucial to understanding how resource usage impacts cost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-6.jpg&quot; alt=&quot;Setup 6&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-7-storage-options&quot;&gt;&lt;strong&gt;Step 7: Storage Options&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;On the &lt;em&gt;Delivery Options&lt;/em&gt; page, users determine the granularity of the data collected, where the CUR will be stored, and how the data will be stored.&lt;/p&gt;

&lt;p&gt;All CUR reports are delivered to an S3 bucket. You must decide whether to create a new S3 bucket or use an existing bucket (both options are included in the IAM permissions provided in this guide). To open the &lt;em&gt;S3 bucket&lt;/em&gt; menu, &lt;strong&gt;click on Configure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-7.jpg&quot; alt=&quot;Setup 7&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-7a-setup-delivery-to-existing-s3-bucket&quot;&gt;&lt;strong&gt;Step 7a: Setup Delivery to Existing S3 Bucket&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The left side of the &lt;em&gt;Configure S3 Bucket&lt;/em&gt; menu is where users can &lt;em&gt;Select an existing bucket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To &lt;em&gt;Select an existing bucket&lt;/em&gt;, click the dropdown below &lt;em&gt;S3 bucket name&lt;/em&gt;, &lt;strong&gt;select the bucket you’d like the CUR to be delivered to,&lt;/strong&gt; and then &lt;strong&gt;click Next&lt;/strong&gt;. This example uses a bucket called &lt;em&gt;‘macroscope-diy-billing&lt;/em&gt;’ that was previously created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-8.jpg&quot; alt=&quot;Setup 8&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-7b-setup-delivery-to-a-new-s3-bucket&quot;&gt;&lt;strong&gt;Step 7b: Setup Delivery to a New S3 Bucket&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To &lt;em&gt;Create a Bucket&lt;/em&gt;, on the right side of the &lt;em&gt;Configure&lt;/em&gt; screen, &lt;strong&gt;enter a unique S3 bucket name&lt;/strong&gt;, &lt;strong&gt;select your Region,&lt;/strong&gt; and then &lt;strong&gt;click Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-9.jpg&quot; alt=&quot;Setup 9&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-8-confirm-s3-bucket-policy&quot;&gt;&lt;strong&gt;Step 8: Confirm S3 Bucket Policy&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Whether you selected an existing bucket or created a new bucket, the next screen will ask you to verify the policy should be applied to your bucket. If you are selecting an existing bucket, this policy will overwrite the existing one. &lt;strong&gt;Check the box next to ‘I have confirmed that this policy is correct’&lt;/strong&gt; and &lt;strong&gt;click Save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-10.jpg&quot; alt=&quot;Setup 10&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-9-other-delivery-options&quot;&gt;&lt;strong&gt;Step 9: Other Delivery Options&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After clicking &lt;em&gt;Save&lt;/em&gt;, you will be returned to the &lt;em&gt;Delivery Options&lt;/em&gt; page. Here you should see that the existing S3 bucket you chose or the new S3 bucket you created is a &lt;em&gt;Valid Bucket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Next, &lt;strong&gt;choose a Report path prefix&lt;/strong&gt; (this example uses &lt;em&gt;‘cur’&lt;/em&gt;), leave all other settings as the default, and then &lt;strong&gt;click Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-11.jpg&quot; alt=&quot;Setup 11&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-10-review-and-complete&quot;&gt;&lt;strong&gt;Step 10: Review and Complete&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;On the &lt;em&gt;Review&lt;/em&gt; page, &lt;strong&gt;review the details for Report Content and Delivery Options&lt;/strong&gt;. Once comfortable with the data, &lt;strong&gt;scroll to the bottom of the page and click Review and Complete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-12.jpg&quot; alt=&quot;Setup 12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Review and Complete&lt;/em&gt; you will be brought back to the &lt;em&gt;AWS Cost and Usage Reports&lt;/em&gt; page. If everything was successful, you will see a &lt;em&gt;Report created successfully&lt;/em&gt; banner on the top of the screen.&lt;/p&gt;

&lt;h3 id=&quot;next-step&quot;&gt;&lt;strong&gt;Next Step&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Cost and Usage Report has been created and the report status has been confirmed. The next step is to go through the steps of Downloading a CUR file for local SQL analysis.&lt;/p&gt;

&lt;h2 id=&quot;downloading-cur-files&quot;&gt;&lt;strong&gt;Downloading CUR Files&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After creating a Cost and Usage Report, it will take approximately 24 hours for the first version of our report to be sent to S3. Once a report has been saved, data can be downloaded and used for analysis.&lt;/p&gt;

&lt;p&gt;Based on how the CUR was created, a new version of the CUR is saved into S3 every day with cumulative data for the month. This report versioning was enabled in case there are updates to historical billing data, and the reports need to be compared. To order to get the most up-to-date cost information, download the most recent file for each month.&lt;/p&gt;

&lt;h3 id=&quot;step-1-go-to-awsamazoncom&quot;&gt;&lt;strong&gt;Step 1. Go to aws.amazon.com&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;First, go to &lt;a href=&quot;https://www.aws.amazon.com/&quot;&gt;aws.amazon.com&lt;/a&gt; and &lt;strong&gt;click sign in&lt;/strong&gt; in the top right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-13.jpg&quot; alt=&quot;Setup 13&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-log-in-to-aws-1&quot;&gt;&lt;strong&gt;Step 2: Log in to AWS&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Enter your Account ID, IAM user name, and password&lt;/strong&gt;. Then &lt;strong&gt;click Sign In&lt;/strong&gt;. Make sure this is the account where the CUR was created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-14.jpg&quot; alt=&quot;Setup 14&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-search-for-s3&quot;&gt;&lt;strong&gt;Step 3: Search for S3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;From the AWS Management Console, in the search bar, search for &lt;em&gt;s3&lt;/em&gt; and &lt;strong&gt;click on S3&lt;/strong&gt; to go to the S3 Console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-15.jpg&quot; alt=&quot;Setup 15&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-select-the-s3-bucket&quot;&gt;&lt;strong&gt;Step 4: Select the S3 Bucket&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Select the S3 bucket&lt;/strong&gt; where your CUR is stored. If there are many S3 buckets in the account, use the search bar that says &lt;em&gt;filter buckets by name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-16.jpg&quot; alt=&quot;Setup 16&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-navigate-to-path-prefix-of-the-cur&quot;&gt;&lt;strong&gt;Step 5: Navigate to Path Prefix of the CUR&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once you have selected your S3 bucket, &lt;strong&gt;navigate the folders to the path prefix&lt;/strong&gt; where your CUR is stored. The screenshot below shows that my path prefix is outlined at the top of the screen. This path prefix will contain folders for each month with an active CUR. &lt;strong&gt;Select the most recent month&lt;/strong&gt; to open that folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-17.jpg&quot; alt=&quot;Setup 17&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-6-select-the-most-recent-cur-version&quot;&gt;&lt;strong&gt;Step 6: Select the Most Recent CUR Version&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In the folder for the most recent month, there will be a folder for every day of the month where a CUR has been saved. To find the most recent version, &lt;strong&gt;scroll to the bottom of the page and open the most recent folder&lt;/strong&gt;. This should be the second-to-last item in the folder. The last file is a JSON manifest that does not help us right now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-18.jpg&quot; alt=&quot;Setup 18&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-7-download-the-cur-csv&quot;&gt;&lt;strong&gt;Step 7: Download the CUR CSV&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this folder, you will see at least one &lt;em&gt;%.csv.gz&lt;/em&gt; file. This file is a compressed version of your Cost and Usage Report. To download this file, &lt;strong&gt;select the checkbox to the left of the file name&lt;/strong&gt;, then &lt;strong&gt;select the Actions drop-down in the Objects menu&lt;/strong&gt; and &lt;strong&gt;click Download as&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If there are multiple &lt;em&gt;%.csv.gz&lt;/em&gt; files in this folder, all of them will need to be downloaded to get the full bill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-19.jpg&quot; alt=&quot;Setup 19&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-8-download-to-desktop&quot;&gt;&lt;strong&gt;Step 8: Download to Desktop&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This will open the &lt;em&gt;Download as&lt;/em&gt; window. Follow the instructions on the dialog box: &lt;strong&gt;right-click the link below&lt;/strong&gt;, &lt;strong&gt;choose Save Link as…&lt;/strong&gt; and &lt;strong&gt;save the file to the location of your choice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-20.jpg&quot; alt=&quot;Setup 20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, the CUR was saved as ‘macroscope-diy-billing-00001.csv.gz’ on the desktop. Make sure to &lt;strong&gt;un-zip your CUR files&lt;/strong&gt; prior to beginning analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-21.jpg&quot; alt=&quot;Setup 21&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;With the CUR file downloaded, the last step is to set up a local development environment using SQLite3 to analyze the CUR report contents.&lt;/p&gt;

&lt;h2 id=&quot;sqlite3&quot;&gt;&lt;strong&gt;SQLite3&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The first step for local analysis is to &lt;a href=&quot;https://www.quackit.com/sqlite/tutorial/sqlite_installation.cfm&quot;&gt;download SQLite3&lt;/a&gt;. The following steps will show how to get started with SQLite3, assuming you’ve installed SQLite3.&lt;/p&gt;

&lt;p&gt;Before moving forward, here is some important information about this demo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;These instructions were created using a Mac.&lt;/li&gt;
  &lt;li&gt;CUR file name: &lt;em&gt;macroscope-diy-billing-00001.csv&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;CUR directory is /Desktop&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1-open-a-terminal&quot;&gt;&lt;strong&gt;Step 1: Open a terminal&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This example uses the default mac Terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-22.jpg&quot; alt=&quot;Setup 22&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-navigate-to-your-cur-directory&quot;&gt;&lt;strong&gt;Step 2: Navigate to your CUR Directory&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Based on the CUR directory for this demo, the command to navigate to the CUR Directory is &lt;em&gt;cd Desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-23.jpg&quot; alt=&quot;Setup 23&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-start-sqlite3&quot;&gt;&lt;strong&gt;Step 3: Start SQLite3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Run the command &lt;em&gt;‘sqlite3’&lt;/em&gt; to start SQLite3&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-24.jpg&quot; alt=&quot;Setup 24&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-set-mode--import&quot;&gt;&lt;strong&gt;Step 4: Set Mode &amp;amp; Import&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Run the command &lt;em&gt;.mode csv&lt;/em&gt;&lt;/strong&gt; to enable SQLite3 to read .csv files. Then &lt;strong&gt;import your CUR file using the &lt;em&gt;.import&lt;/em&gt; command&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This demo imports the file ‘macroscope-diy-billing-00001.csv’ as a table called ‘diybilling’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/setup-25.jpg&quot; alt=&quot;Setup 25&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-run-a-test-query&quot;&gt;&lt;strong&gt;Step 5: Run a Test Query&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once the table has been imported, run a sample query to see if any results are returned. The sample query used in this demo is below.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from diybilling limit 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‍&lt;/p&gt;
</description>
                <pubDate>Mon, 11 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/cost-and-usage-report-setup</link>
                <guid isPermaLink="true">http://localhost:4000/cost-and-usage-report-setup</guid>
                
                <category>cloud</category>
                
                <category>dgac</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;The Cost and Usage Report is the standard report from AWS for customers to understand and manage their costs. The &lt;a href=&quot;https://docs.aws.amazon.com/cur/latest/userguide/what-is-cur.html&quot;&gt;Cost and Usage Report&lt;/a&gt; drives most cloud cost management tools, including AWS Cost Explorer. This documentation will outline the essential fields in the Cost and Usage Report, explain how those fields can be used for cloud cost management, and provide sample values users can use to build queries based on usage in their accounts.&lt;/p&gt;

&lt;h2 id=&quot;the-cost-and-usage-report&quot;&gt;&lt;strong&gt;The Cost and Usage Report&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The Cost and Usage Report is the standard billing report for AWS Customers. This report is free (except for the S3 storage costs) and can be created by anyone with the proper billing permissions. For more details on the Cost and Usage Report, how to make a report, and getting started with analysis, check out &lt;a href=&quot;https://eightlake.com/cost-and-usage-report-setup&quot;&gt;this guide&lt;/a&gt; on the Strake blog.&lt;/p&gt;

&lt;p&gt;This report contains over 200 fields and can be millions of records for a single month of usage. Using the documentation below, we are taking the ~200 fields in the Cost and Usage Report and filtering it down to only 30 of the most critical fields. These 30 fields will answer most of your cost management questions and greatly simplify your cloud cost management practices.&lt;/p&gt;

&lt;h2 id=&quot;cost-and-usage-report-field-categories&quot;&gt;&lt;strong&gt;Cost and Usage Report Field Categories&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are seven categories of cost fields across all Cost and Usage Reports: Bill, Identity, Pricing, Line Item, Product, Reservation, and Savings Plans. Below, we will break out the essential fields by field categories, provide details about what these fields describe, and provide sample values that will show up in your cost and usage report.&lt;/p&gt;

&lt;h2 id=&quot;bill&quot;&gt;&lt;strong&gt;Bill&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Bill fields provide details about the specific bill and billing period the usage happened in. Most importantly, we need these fields to understand the period for the statement we are analyzing and the account paying the AWS bill.&lt;/p&gt;

&lt;h3 id=&quot;billbillingperiodstartdate&quot;&gt;&lt;strong&gt;bill/BillingPeriodStartDate&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The billing period start date will tell you the date for the beginning of the month when this usage happened. This field will help you filter down to specific months for cost analysis or can be used to identify the month when you’re analyzing unusual usage patterns.&lt;/p&gt;

&lt;p&gt;There is a complimentary field to bill/BillingPeriodStartDate called bill/BillingPeriodEndDate. Using the ‘Start’ date is recommended for cloud cost analysis because the date structure always has the day as ‘00’ instead of varying based on the number of days in a month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2022-03-01T00:00:00Z
2022-06-01T00:00:00Z
2022-07-01T00:00:00Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;billpayeraccountid&quot;&gt;&lt;strong&gt;bill/PayerAccountId&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Payer Account ID will tell you which account is paying the bill for usage on any given line item. This field is especially valuable in cases where the account utilizing infrastructure is not the account paying for the infrastructure. An example of this could be if your organization uses AWS Organizations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;098765432109
012345678901
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;identity&quot;&gt;&lt;strong&gt;Identity&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When your Cost and Usage Report gets too large, AWS will store multiple files for a single month of usage. Identity fields help users identify specific resources at specific periods across Cost and Usage report files for a single month.&lt;/p&gt;

&lt;h3 id=&quot;identitylineitemid&quot;&gt;&lt;strong&gt;identity/LineItemId&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The line item ID is unique for any line item in a given billing period. If you want to communicate a specific line item for cloud cost management conversations, you can easily share the Line Item ID and isolate the costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ym6omxa25tpt2on5yxvyxrbfwv5jp6nlw54sxmwfd0022558899q
xnvfo1234567890zhlvj57j1234567890nsxwbbf3c676edlgoda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pricing&quot;&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Pricing files help users understand how their charges are calculated and what drives specific cost categories.&lt;/p&gt;

&lt;h3 id=&quot;pricingunit&quot;&gt;&lt;strong&gt;pricing/unit&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The pricing unit describes the unit for lineItem/UsageAmount for every line item. For example, an EC2 instance with the Operation ‘RunInstances’ will show usage in hours, while data transfer costs will show usage in GB.&lt;/p&gt;

&lt;p&gt;Users looking to understand pricing units across their usage can combine lineItem/ProductCode, lineItem/Operation, and pricing/unit to see all the possible pricing metrics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hours
GB-month
Request
Terabytes
Second
Objects
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;line-item&quot;&gt;&lt;strong&gt;Line Item&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Most cloud cost management tasks can be completed using Line Item fields in the Cost and Usage Report. These fields will cover most of the cost information and details on how resources are being utilized.&lt;/p&gt;

&lt;h3 id=&quot;lineitemavailabilityzone&quot;&gt;&lt;strong&gt;lineItem/AvailabilityZone&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Line Item Availability Zone is the most reliable field in the Cost and Usage Report for determining the Availability Zone hosting your usage. This field helps isolate costs in a specific availability zone when managing AWS costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eu-west-3c
eu-west-1a
eu-west-1
eu-west-1b
eu-west-1c
us-west-2
eu-north-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemlineitemtype&quot;&gt;&lt;strong&gt;lineItem/LineItemType&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Line Item Type will help break down key cost categories in your Cost and Usage Report. Four key categories of Line Item Type values are explained below in the sample values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Business Values: &apos;Tax&apos;, &apos;Credits&apos;, and &apos;Fee&apos;
Normal Usage: &apos;Usage&apos;
Reserved Instances: &apos;DiscountedUsage&apos;, &apos;RIFee&apos;
Savings Plans: &apos;SavingsPlanCoveredUsage&apos;, &apos;SavingsPlanNegation&apos;, &apos;SavingsPlanRecurringFee&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemoperation&quot;&gt;&lt;strong&gt;lineItem/Operation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The line item Operation explains the category of usage for every line item. There will likely be many operations for any AWS Service you use in your environment. The sample values below list examples of lineItem/Operation for EC2 usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RunInstances
InterZone-In
InterZone-Out
PublicIP-Out
PublicIP-In
NatGateway
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemproductcode&quot;&gt;&lt;strong&gt;lineItem/ProductCode&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Product Code will identify the AWS Service used for every line item. The fields lineItem/ProductCode and product/ProductName are very similar and can be used interchangeably for most analyses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AmazonEC2
AmazonRDS
AWSCloudTrail
AWSLambda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemresourceid&quot;&gt;&lt;strong&gt;lineItem/ResourceID&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Resource ID uniquely identifies resources in your AWS environment. Unfortunately, these are only available for certain AWS services, and the Resource ID has a different structure across AWS services. Below is a sample list of services covered and how those resources are identified from the AWS documentation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elastic Compute Cloud Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i-0095728d40ccea8c5
i-1234567890asdfgh0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;EBS Volume Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vol-09b09dfc3049057a1
vol-abcdefgh123456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;EBS Volume Snapshot Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arn:aws:ec2:us-east-1:123456711330:snapshot/snap-1234567cf9882b4e4
arn:aws:ec2:us-east-1:123456789012:snapshot/snap-123abcdefghijk123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nat Gateway Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arn:aws:ec2:us-east-1:123456711330:natgateway/nat-1234567e3f38ba3b5
arn:aws:ec2:us-west-2:123456711330:natgateway/nat-abcdefge123456789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemunblendedrate&quot;&gt;&lt;strong&gt;lineItem/UnblendedRate&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The unblended rate for a line item is the rate at a specific point in time for your account’s usage. I recommend AWS customers use the unblended rate, so you are more accurately representing costs by usage account. There is also a blended rate, which will blend rates across AWS Organizations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric values.&lt;/p&gt;

&lt;h3 id=&quot;lineitemusageaccountid&quot;&gt;&lt;strong&gt;lineItem/UsageAccountId&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Usage Account ID identifies the account where the usage took place for each Cost and Usage Report line item. These values can be the same as bill/PayerAccountId values if the account where the usage took place is also the account paying the AWS bill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123456789123
012345678901
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemusageamount&quot;&gt;&lt;strong&gt;lineItem/UsageAmount&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Usage Amount, in a specific unit, for each line item. This field is combined with lineItem/UnblendedRate to calculate the lineItem/UnblendedCost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric values.&lt;/p&gt;

&lt;h3 id=&quot;lineitemnormalizedusageamount&quot;&gt;&lt;strong&gt;lineItem/NormalizedUsageAmount&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This field is a normalized value of the lineItem/UsageAmount field. For all instance usage in AWS, the normalized use is represented in size ‘small.’&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric values.&lt;/p&gt;

&lt;h3 id=&quot;lineitemusagetype&quot;&gt;&lt;strong&gt;lineItem/UsageType&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Usage Type will explain another level of detail when combined with the line item operation field. Instead of just showing that this line item is for an EC2 Instance running, it will explain the type of EC2 instance usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BoxUsage:m1.medium
EU-Lambda-GB-Second
EU-CloudFront-Out-Bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lineitemunblendedcost&quot;&gt;&lt;strong&gt;lineItem/UnblendedCost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Unblended Cost is a calculated field using lineItem/UnblendeRate and lineItem/UsageAmount that will show the UnblendedCost for a line item. This field can only reliably be used for on-demand and spot usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric values.&lt;/p&gt;

&lt;h2 id=&quot;product&quot;&gt;&lt;strong&gt;Product&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Product fields give more details about the specific resources used for this line item. Some examples of Product details we can get out of these fields include instance types, regions, and AWS product names.&lt;/p&gt;

&lt;h3 id=&quot;productinstancetype&quot;&gt;&lt;strong&gt;product/instanceType&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Instance Type field works for Amazon EC2, Amazon RDS, OpenSearch Service, Amazon Elasticache, Amazon EMR, and others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;t4g.xlarge
cache.r6g.large
ml.r5.4xlarge-Notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;productproductname&quot;&gt;&lt;strong&gt;product/ProductName&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The AWS Product Name field will display the full product name instead of the service code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amazon Elastic Compute Cloud
Amazon Elastic Container Service
Amazon Simple Storage Service
Elastic Load Balancing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;productregion&quot;&gt;&lt;strong&gt;product/region&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The region field displays the region where the usage took place for each line item. The value will show ‘global’ for resources not tied to a single region.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;us-east-1
eu-west-1
global
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;productfromlocation-and-producttolocation&quot;&gt;&lt;strong&gt;product/fromLocation and product/toLocation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;These two fields will provide details on where the use originated from and where the destination is. These fields are beneficial for tracking data transfer costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;US East (N. Virginia)
US West (Oregon)
Asia Pacific (Mumbai)
EU (Ireland)
External
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reservation&quot;&gt;&lt;strong&gt;Reservation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Reservation fields provide details on Reserved Instances. Reserved Instances are a widely used Reservation tool in AWS, but costs can be hard to track without the proper insight. The fields below will help users understand how reservations impact the architecture costs.&lt;/p&gt;

&lt;h3 id=&quot;reservationreservationarn&quot;&gt;&lt;strong&gt;reservation/ReservationARN&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Reserved instance reservations are all given an ARN. This ARN is tracked in the Reservation ARN field and can be used to track where specific reservations are being applied in your aws environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arn:aws:rds:us-east-1:123456789035:ri:ri-2021-06-22-33-44-40-219
arn:aws:ec2:us-east-1:987654321330:ri:ri-2021-09-01-11-22-33-259
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reservationeffectivecost&quot;&gt;&lt;strong&gt;reservation/EffectiveCost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The effective reservation cost combines two essential costs of using Reservations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Amortization of upfront fees - If you pre-pay for reservations, that cost is amortized over the period of your reservation in the effective cost field.&lt;/li&gt;
  &lt;li&gt;Hourly Cost - If you have hourly costs for reservations, this cost is included in addition to the amortization of upfront fees.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric value.&lt;/p&gt;

&lt;h3 id=&quot;reservationunusednormalizedunitquantity&quot;&gt;&lt;strong&gt;reservation/UnusedNormalizedUnitQuantity&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Unused Normalized Unit Quantity calculates the normalized units (in size small) that are not used from this reservation. Analyzing this field is a simple and easy way to understand whether or not your reservations are being used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric value.&lt;/p&gt;

&lt;h3 id=&quot;reservationendtime&quot;&gt;&lt;strong&gt;reservation/EndTime&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Reservation End Time will tell your team when the reservation will expire. This field offers a straightforward way to keep your team on top of expiring reservations so they can be replaced as needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2022-06-01T21:06:54.000Z
2022-08-01T19:28:36.000Z
2022-09-29T19:10:59.000Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;savings-plans&quot;&gt;&lt;strong&gt;Savings Plans&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Savings Plans are the new generation of reservation tools from AWS. There are significant benefits to using EC2 and Compute savings plans, but you still need to understand your Savings Plan costs and how they are being used.&lt;/p&gt;

&lt;h3 id=&quot;savingsplanofferingtype&quot;&gt;&lt;strong&gt;savingsPlan/OfferingType&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;There are two types of Savings plans: Compute Savings Plans and EC2 Savings Plans. This field will tell you what kind of reservation is applied to a specific line item.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ComputeSavingsPlans
EC2SavingsPlans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;savingsplanpaymentoption&quot;&gt;&lt;strong&gt;savingsPlan/PaymentOption&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;There are three payment options for Savings Plans: No Upfront, Partial Upfront, and All Upfront. These payment options impact your discounts and how costs flow through your billing reports.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No Upfront
Partial Upfront
All Upfront
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;savingsplanpurchaseterm&quot;&gt;&lt;strong&gt;savingsPlan/PurchaseTerm&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can purchase Savings Plans for 1 year or 3 years. This field will tell you the purchase term for the savings plan applied to the line item.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1yr
3yr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;savingsplansavingsplanarn&quot;&gt;&lt;strong&gt;savingsPlan/SavingsPlanARN&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Similar to Reservations, Savings Plans have an ARN that can be used to track where your Savings Plan is being applied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arn:aws:savingsplans::029987654321:savingsplan/439d1e6d-cb93-4145-874d-438b98765432
arn:aws:savingsplans::0291987654321:savingsplan/1238a36-4cc8-4dd9-9cf7-937912341234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;savingsplansavingsplaneffectivecost&quot;&gt;&lt;strong&gt;savingsPlan/SavingsPlanEffectiveCost&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The savings plan effective cost combines two essential costs of using Reservations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Amortization of upfront fees - If you pre-pay for savings plans, that cost is automatically amortized over the period of your reservation in the effective cost field.&lt;/li&gt;
  &lt;li&gt;Hourly Cost - If you have hourly costs for savings plans, this cost is included in addition to the amortization of upfront fees.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Numeric value.&lt;/p&gt;

&lt;h3 id=&quot;savingsplanendtime&quot;&gt;&lt;strong&gt;savingsPlan/EndTime&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Savings Plan End Time will tell your team when the Savings plan will expire. This field offers a straightforward way to keep your team on top of expiring reservations so they can be replaced as needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Values:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2022-06-01T21:06:54.000Z
2022-08-01T19:28:36.000Z
2022-09-29T19:10:59.000Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Sun, 10 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/aws-cost-and-usage-report-documentation</link>
                <guid isPermaLink="true">http://localhost:4000/aws-cost-and-usage-report-documentation</guid>
                
                <category>cloud</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;In this overview of AWS Reservations, we will discuss the most popular reservation products: Compute Savings Plans, EC2 Savings Plans, EC2 Reserved Instances, and RDS Reserved Instances. In addition, we will mention the other reservation products offered by AWS and where you can find more information on those products.&lt;/p&gt;

&lt;h2 id=&quot;what-are-awsreservations&quot;&gt;&lt;strong&gt;What are AWS Reservations?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;AWS Reservations offer customers the ability to commit to using certain resources for an extended period of time in exchange for a steep discount. Discounts range from 20-75% depending on how much risk your organization is willing to take.&lt;/p&gt;

&lt;h2 id=&quot;compute-savings-plans&quot;&gt;&lt;strong&gt;Compute Savings Plans&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/savingsplans/compute-pricing/&quot;&gt;Compute Savings Plans&lt;/a&gt; are the most flexible reservation tool offered by Amazon Web Services. Using a compute savings plan from AWS, you can commit to a certain amount of ‘compute’ spending and receive a significant discount.&lt;/p&gt;

&lt;p&gt;Compute Savings Plans reduce the engineering overhead of using AWS Reservations. Compute Savings Plans are automatically applied across your EC2, Fargate, and Lambda usage regardless of instance type, Region, operating system, or tenancy.&lt;/p&gt;

&lt;p&gt;Compute Savings Plans commitments are made in dollars per hour. If you execute a Compute Savings Plan commitment of $1 for a 1-year term, that is a commitment to spending $1 on compute (either EC2, Lambda, or Fargate) at discount prices every hour for the following year.&lt;/p&gt;

&lt;h3 id=&quot;compute-savings-plan-options&quot;&gt;&lt;strong&gt;Compute Savings Plan Options&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;term-length&quot;&gt;&lt;strong&gt;Term Length&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A Compute Savings Plan is either a 1-year or 3-year commitment. The longer the commitment, the more significant the discount. Committing to a three-year term will generally cause the discount rate to double.&lt;/p&gt;

&lt;h3 id=&quot;payment-options&quot;&gt;&lt;strong&gt;Payment Options&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Payment terms for Compute Savings Plans determine whether the contract is paid upfront or hourly for the term of the agreement. The more money paid upfront will increase the discount for the Compute Savings Plan. There are three options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All Upfront - The contract is paid upfront before any usage. All Upfront payment terms provide the highest discount rate.&lt;/li&gt;
  &lt;li&gt;Partial Upfront - Half of the contract is paid upfront, and half is paid hourly over the agreement term. Partial upfront is a lower discount rate than All Upfront but a higher discount than No Upfront.&lt;/li&gt;
  &lt;li&gt;No Upfront - No money paid upfront and the lowest discount rate. The cost of the contract is paid over the agreement term.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;compute-savings-plan-reservation-calculation&quot;&gt;&lt;strong&gt;Compute Savings Plan Reservation Calculation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To calculate the compute savings plan commitment your team should make, you need to understand how much for On-Demand usage is in your account. To do that, you can either use the AWS Cost Explorer or query your Cost and Usage Report. For a full walkthrough of how to query your Cost and Usage Report, check out this walkthrough on the &lt;a href=&quot;https://eightlake.com/developer-guide-to-aws-costs&quot;&gt;Developer’s Guide to AWS Costs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you understand the On-Demand usage in your account, you need to calculate what that usage would cost if a Compute Savings Plan covered the usage.&lt;/p&gt;

&lt;p&gt;For example, let’s say that over the last seven days, we had 10,000 hours of m5.large On-Demand usage in the US East, North Virginia Region, needs to be covered with a three-year, All Upfront, Compute Savings plan. To calculate the Compute Savings Plan commitment to cover this usage, we must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiply the On Demand hours by the Savings Plan rate:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute Savings Plan rate = $0.044  
Number of m5.large hours = 10,000
10,000 hours ** $0.044 per hour = $440*&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take the $440 for the last seven days, and identify the spend per hour:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$440 for 7 days = $62.85 per day = $2.61 per hour&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Assuming your team wants to cover 100% of this usage, the hourly commitment executed in the AWS Console is &lt;strong&gt;$5.71 per hour&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ec2-savings-plans&quot;&gt;&lt;strong&gt;EC2 Savings Plans&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/savingsplans/compute-pricing/#:~:text=Savings%20Plans%20are%20a%20flexible,1%20or%203%20year%20term.&quot;&gt;EC2 Savings Plans&lt;/a&gt; provide a deeper discount than Compute Savings Plans but only apply to EC2 usage and require you to make a more detailed commitment. EC2 Savings Plans require AWS customers to commit to usage in a specific instance family in an AWS Region. Once this commitment is made, the savings are automatically applied to the instance families you chose, regardless of the instance type.&lt;/p&gt;

&lt;p&gt;The additional restrictions on EC2 Savings Plans require more planning and alignment by engineering teams. Once this commitment is made, it will not automatically be applied if the team decides to change their instance family or to operate in a different region.&lt;/p&gt;

&lt;p&gt;Similar to Compute Savings Plans, an EC2 Savings Plan commitment is made in dollars per hour.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/money.jpg&quot; alt=&quot;Money&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ec2-savings-plan-options&quot;&gt;&lt;strong&gt;EC2 Savings Plan Options&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;EC2 Savings Plans require the user to select the AWS Region, Instance Family, Term Length, and Payment Option before committing.&lt;/p&gt;

&lt;h3 id=&quot;aws-region&quot;&gt;&lt;strong&gt;AWS Region&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;EC2 Savings Plans commitments are made by Region. For example, a Region could be US East (N. Virginia).&lt;/p&gt;

&lt;h3 id=&quot;instance-family&quot;&gt;&lt;strong&gt;Instance Family&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;EC2 Savings Plans require the user to select an instance family that is covered. For example, this would be ‘m5’ or ‘c5’. It is important to note that EC2 Savings Plans are size flexible, so users can avoid committing to individual instance types.&lt;/p&gt;

&lt;h3 id=&quot;term-length-1&quot;&gt;&lt;strong&gt;Term Length&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Same as with the Compute Savings Plan, the term length options for an EC2 Savings Plan are either 1-year or 3 years. On average, going from a 1-year to a 3-year commitment with EC2 Savings Plans will increase your discount by 50%.&lt;/p&gt;

&lt;h3 id=&quot;payment-options-1&quot;&gt;&lt;strong&gt;Payment Options&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Same as the Compute Savings Plan, the payment options for an EC2 Savings Plan are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All Upfront - The contract is paid upfront before any usage. All Upfront payment terms provide the highest discount rate.&lt;/li&gt;
  &lt;li&gt;Partial Upfront - Half of the contract is paid upfront, and half is paid hourly over the agreement term. Partial upfront is a lower discount rate than All Upfront but a higher discount than No Upfront.&lt;/li&gt;
  &lt;li&gt;No Upfront - No money paid upfront and the lowest discount rate. The cost of the contract is paid over the agreement term.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ec2-savings-plan-reservation-calculation&quot;&gt;&lt;strong&gt;EC2 Savings Plan Reservation Calculation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The calculation for EC2 Savings Plans Reservations is very similar to Compute Savings Plans, except we don’t need to worry about Fargate or Lambda usage.&lt;/p&gt;

&lt;p&gt;Let’s use the same example of 10,000 hours of m5.large On-Demand usage in the US East North Virginia Region over the past seven days. That usage needs to be covered with a three-year, All Upfront, EC2 Savings plan. To calculate the required Compute Savings Plan commitment for this usage, we must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiply the On Demand hours by the Savings Plan rate:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute Savings Plan rate = $0.036 
Number of m5.large hours = 10,000
10,000 hours ** $0.036 per hour = $360*&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take the $360 for the last seven days, and identify the spend per hour:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$360 for 7 days = $51.42 per day = $2.14 per hour&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Assuming your team wants to cover 100% of this usage, the reservation must be &lt;strong&gt;$2.14 per hour&lt;/strong&gt;. The EC2 Savings Plan provides an &lt;strong&gt;additional 18% discount&lt;/strong&gt; compared to the Compute Savings plan.&lt;/p&gt;

&lt;h2 id=&quot;reserved-instances&quot;&gt;&lt;strong&gt;Reserved Instances&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Reserved Instances are the previous generation of Reservations offered by Amazon Web Services. Reserved Instances are still alive and well, but require significantly more overhead than Compute or EC2 Savings Plans.&lt;/p&gt;

&lt;p&gt;Reserved Instances are a commitment made against resources. For example, if you are running 100 m5.large instances, you will need to commit to 100 m5.large reserved instances.&lt;/p&gt;

&lt;p&gt;Amazon offers Reserved Instances for Elastic Compute Cloud (EC2), Relational Database Service (RDS), Elasticache, Amazon OpenSearch, Amazon Redshift, and DynamoDB. All these products require the buyer to choose a Term of 1-year or three years and Payment Options of All Upfront, Partial Upfront, or No Upfront.&lt;/p&gt;

&lt;h3 id=&quot;elastic-compute-cloud-ec2-reserved-instances&quot;&gt;&lt;strong&gt;Elastic Compute Cloud (EC2) Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;EC2 Reserved Instances are the most common type of Reserved Instance. EC2 Reserved Instances come in two categories: Standard and Convertible Reserved Instances.&lt;/p&gt;

&lt;p&gt;With the creation of Compute Savings Plans and EC2 Savings Plans, it makes sense for most AWS customers to purchase those products instead of EC2 Reserved Instances. These products offer similar discounts with significantly less developer overhead.&lt;/p&gt;

&lt;h3 id=&quot;standard-reserved-instances&quot;&gt;&lt;strong&gt;Standard Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Standard Reserved Instances lock in a price on instance usage and do not allow the user to change the instance family, operating system, or tenancy of the reservation. If changes need to be made to the AWS availability zone, EC2 instance size, or networking type, you can make those changes via the AWS APIs or in the AWS Management Console.&lt;/p&gt;

&lt;h3 id=&quot;convertible-reserved-instances&quot;&gt;&lt;strong&gt;Convertible Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Convertible Reserved Instances offer additional flexibility over Standard Reserved Instances by allowing users to change instance family, operating system, tenancy, and payment options and give customers benefits when infrastructure prices are reduced.&lt;/p&gt;

&lt;h3 id=&quot;relational-database-service-rds-reserved-instances&quot;&gt;&lt;strong&gt;Relational Database Service (RDS) Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Relational Database Service (RDS) Reserved Instances significantly discount your RDS usage. AWS customers can not cover RDS with Savings Plans products, so Reserved Instances are your only option.&lt;/p&gt;

&lt;p&gt;Here are some of the key details of RDS Reserved Instances:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;RDS Reserved Instances are available for all supported DB Engines and in all AWS Regions.&lt;/li&gt;
  &lt;li&gt;Only MySQL, MariaDB, PostgreSQL, Amazon Aurora DB Engines, and BYOL for Oracle offer instance size flexibility. There is no size flexibility for other DB engines, meaning users who have to reserve the exact instance type they plan to use.&lt;/li&gt;
  &lt;li&gt;Terms offered for 1 or 3 years&lt;/li&gt;
  &lt;li&gt;Payment Options are All Upfront, Partial Upfront, and No Upfront. The No Upfront payment option is only available for a 1-year term for RDS.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;all-other-reserved-instances&quot;&gt;&lt;strong&gt;All Other Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Amazon Web Services does offer reservation tools for other AWS products: AWS OpenSearch Service, Amazon Redshift, Amazon ElastiCache, and Amazon DynamoDB. These offerings are more complex than any of the reservations we’ve discussed before and require a deep understanding of the engineering roadmap before committing.&lt;/p&gt;

&lt;h3 id=&quot;aws-opensearch-service-reserved-instances&quot;&gt;&lt;strong&gt;AWS OpenSearch Service Reserved Instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;OpenSearch Service Reserved Instances are identical to on-demand instances. They offer a 1 or 3-year commitment with an all upfront, partial upfront, and no upfront payment option.&lt;/p&gt;

&lt;p&gt;OpenSearch Service Reserved Instances are not size-flexible. Suppose a reservation is made for c5.large.search instances that will not cover usage for any c5.2xlarge.search instances.&lt;/p&gt;

&lt;p&gt;For more information about OpenSearch Service Reserved Instances, check out the Reserved Instances in Amazon OpenSearch Service &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ri.html&quot;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;amazon-redshift-reserved-nodes&quot;&gt;&lt;strong&gt;Amazon Redshift Reserved Nodes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Amazon Redshift Reserved Nodes offer the ability to reserve nodes in return for a discount. Reserved nodes come in 1 or 3-year commitments with all upfront, partial upfront, and no upfront payment options. Similar to RDS, the no upfront payment option is only available for a 1-year term.&lt;/p&gt;

&lt;p&gt;Redshift Reserved Nodes are not size-flexible. When making a reservation, you must specify the node type you want to be covered. If this node type changes, you will pay on-demand rates for the new nodes and still be charged for your reservation.&lt;/p&gt;

&lt;p&gt;For more information about Redshift Reserved Nodes, check the Purchasing Amazon Redshift reserved nodes &lt;a href=&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html&quot;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;amazon-elasticache-reserved-nodes&quot;&gt;&lt;strong&gt;Amazon ElastiCache Reserved Nodes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Amazon ElastiCache Reserved Nodes offer customers the ability to reserve Cache node capacity for 1 or 3 years with either an all upfront, partial upfront, or no upfront pricing model. These are available for Redis and Memcached nodes and apply to all AWS Regions.&lt;/p&gt;

&lt;p&gt;To make a reservation, you must select the Region, Term Length, and Cache Node Class, which you cannot change later. There is a maximum purchase limit of 300 cache nodes until you have to request a service level increase manually.&lt;/p&gt;

&lt;p&gt;For more information about Amazon ElastiCache Reserved Nodes, check out the Amazon ElastiCache Reserved Nodes &lt;a href=&quot;https://aws.amazon.com/elasticache/reserved-cache-nodes/&quot;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;amazon-dynamodb-reserved-capacity&quot;&gt;&lt;strong&gt;Amazon DynamoDB Reserved Capacity&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Amazon DynamoDB Reserved Capacity offers significant savings for customers that can predict their read-and-write throughput. Users of DynamoDB Reserved Capacity pay a one-time upfront fee and a minimum usage level for the reservation duration.&lt;/p&gt;

&lt;p&gt;DynamoDb Reserved Capacity only makes sense for AWS customers with extremely predictable DynamoDB usage or who have a minimum amount of usage they want to commit to in return for a slight reduction in spending. There is a big risk that Engineering optimizations could reduce your read-and-write throughput, and you would waste money on your reservation.&lt;/p&gt;

&lt;p&gt;For more information on Amazon DynamoDB Reserved Capacity, check out the Amazon DynamoDB reservations &lt;a href=&quot;https://docs.aws.amazon.com/whitepapers/latest/cost-optimization-reservation-models/amazon-dynamodb-reservations.html&quot;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt;
</description>
                <pubDate>Sat, 09 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/complete-guide-to-aws-reservations</link>
                <guid isPermaLink="true">http://localhost:4000/complete-guide-to-aws-reservations</guid>
                
                <category>cloud</category>
                
                <category>dgac</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;h2 id=&quot;introduction-to-awscosts&quot;&gt;Introduction to AWS Costs&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://eightlake.com/developer-guide-to-aws-costs&quot;&gt;Developer’s Guide to AWS Costs&lt;/a&gt; is a project created and maintained by the team here at Strake. This project provides engineers with the code and insights to answer the most common AWS Cost questions using the Cost and Usage Report (CUR). The analysis is formatted as a series of ‘guides’ that focus on key AWS services and cost problems.&lt;/p&gt;

&lt;p&gt;AWS Billing is seriously overcomplicated. Our goal with this series of guides is to remove the confusion around AWS Cost Analysis and help engineers expedite cloud cost reduction.&lt;/p&gt;

&lt;p&gt;If there are questions, comments, or concerns you want to see analyzed in this project, you can &lt;a href=&quot;https://github.com/getstrake/developer-cost-guide/discussions/2&quot;&gt;add to the Roadmap&lt;/a&gt; discussion on our GitHub page. If there is something financially sensitive you want to discuss, &lt;a href=&quot;mailto:brian@eightlake.com&quot;&gt;reach out to us&lt;/a&gt;. We love a challenge – if there is a cost problem your team is having, we want to help solve it.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;My name is &lt;a href=&quot;https://www.linkedin.com/in/brianpatrickregan/&quot;&gt;Brian Regan&lt;/a&gt; and I’m a co-founder of Strake. I started my professional career in finance and clawed my way into the product/engineering world by teaching myself Amazon Web Services.&lt;/p&gt;

&lt;p&gt;My knowledge of corporate finance and a &lt;em&gt;basic&lt;/em&gt; understanding of AWS made me an easy target to be the one to translate cloud costs into a business plan. I soon found myself being a translation service between our CFO and Engineering organization, explaining what drove our Costs of Goods Sold (COGS) and how our growth would impact the company’s financial profile. I didn’t know this at the time, but I was helping my company implement FinOps.&lt;/p&gt;

&lt;p&gt;Since that first job, &lt;strong&gt;I’ve spent thousands of hours analyzing AWS environments.&lt;/strong&gt; I’ve helped startups and multi-billion dollar publicly traded companies understand their billing. Across all the AWS customers I’ve worked with, the story is almost always the same: when cloud costs become an issue, analysts purchase reservations, and the CEO signs an Enterprise Discount Program (EDP) to temporarily reduce costs.&lt;/p&gt;

&lt;p&gt;Inevitably, these temporary solutions don’t solve the underlying infrastructure problems driving cost, and engineering capacity is required to understand and fix the problem. &lt;strong&gt;In the worst cases, cloud cost reduction will start to compete with your product roadmap as the top Engineering priority&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sqlite3&quot;&gt;&lt;strong&gt;SQLite3&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;These guides utilize SQL for basic data analysis. I chose to do this analysis using &lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;SQLite3&lt;/a&gt; because it is a free, accessible tool with a gentle learning curve. Another reason I like SQLite3 is the extensive &lt;a href=&quot;https://www.sqlite.org/docs.html&quot;&gt;documentation&lt;/a&gt; and large online community. All cost analysis will work using SQLite3 on your terminal, but if you prefer a database editor, I recommend &lt;a href=&quot;https://www.sqlitepro.com/&quot;&gt;SQLPro for SQLite&lt;/a&gt;, which costs $99.99/yr. &lt;a href=&quot;https://dbeaver.io/download/&quot;&gt;DBeaver.io&lt;/a&gt; is an excellent free alternative.&lt;/p&gt;

&lt;p&gt;Since I am using SQLite3 in these guides and I don’t make any changes to the Cost and Usage Report (CUR) before beginning the analysis, you will notice all the fields in the analysis are in brackets. Unfortunately, AWS has ‘/’ in all of the field names in the CUR by default, which throws off queries in SQLite3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dgac-1.jpg&quot; alt=&quot;DGAC 1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-and-usage-report&quot;&gt;&lt;strong&gt;Cost and Usage Report&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The main data source we will use for this analysis is the &lt;a href=&quot;https://docs.aws.amazon.com/cur/latest/userguide/what-is-cur.html&quot;&gt;AWS Cost and Usage Report (CUR)&lt;/a&gt;. This is the most detailed billing report offered by AWS and the ‘source of truth’ for what shows up on your bill.  In the &lt;a href=&quot;https://eightlake.com/cost-and-usage-report-setup&quot;&gt;first guide&lt;/a&gt;, I go through the setup and IAM policies required for creating this data source. There is a pretty good &lt;a href=&quot;https://docs.aws.amazon.com/cur/latest/userguide/data-dictionary.html&quot;&gt;data dictionary&lt;/a&gt; for the cost and usage report on the AWS documentation, but I will go into more detail about the fields used for analysis in each guide.&lt;/p&gt;

&lt;p&gt;The CUR is free, but you will have to pay S3 charges to store the billing data (yes, AWS makes you pay to store your bill). This should be an insignificant amount of money, less than $5 per month for storing a year of billing data for most customers.&lt;/p&gt;

&lt;p&gt;Tags used by your engineering teams will show up in the CUR if they are &lt;a href=&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/activating-tags.html&quot;&gt;activated in the billing console&lt;/a&gt;. Since tags are not activated by default and details are not populated historically, your team needs to consider which tags should be activated before you get too deep into any analysis.&lt;/p&gt;

&lt;p&gt;Field names in the CUR contain a ‘/’ in the names by default. This is very inconvenient for data analysis. SQLite3 won’t read the field names unless the field name is in brackets. I decided that this analysis would work with the CUR out-of-the-box, so all field names in the analysis will be in brackets. For example, the field ‘&lt;strong&gt;product/instanceType&lt;/strong&gt;’ is noted as ‘&lt;strong&gt;[product/instanceType]&lt;/strong&gt;’ in the code blocks.&lt;/p&gt;

&lt;h2 id=&quot;get-in-touch&quot;&gt;&lt;strong&gt;Get in Touch!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The guides I am preparing are based on my personal experience and the situations I’ve worked through with Strake’s customers. If you are reading this and have a specific problem your team is struggling with, check out the discussions on our &lt;a href=&quot;https://github.com/getstrake/developer-cost-guide/discussions&quot;&gt;GitHub page&lt;/a&gt; and submit an analysis request. Send your worst – I’m always up for a challenge!&lt;/p&gt;

&lt;p&gt;Understanding your bill is a critical first step in reducing cloud costs, but the team at Strake is tackling much more than billing. Check out the rest of our website if you’re interested in getting a product demo to see what we are building.&lt;/p&gt;
</description>
                <pubDate>Fri, 08 Dec 2023 02:00:00 -0700</pubDate>
                <link>http://localhost:4000/developer-guide-to-aws-costs</link>
                <guid isPermaLink="true">http://localhost:4000/developer-guide-to-aws-costs</guid>
                
                <category>cloud</category>
                
                <category>dgac</category>
                
                
            </item>
        
    </channel>
</rss>